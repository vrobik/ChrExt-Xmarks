function ProcessSyncType(){UpdateSyncUI();var a=Xmarks.Settings.GetSyncInfo();if(0==a.toProcess.length)ResetSyncAction();else{var c=a.toProcess.shift();Xmarks.Settings.GetBool("sync-type-"+c.type,c.defaultEnabled)?c.fn?c.fn(c,a):(Xmarks.LogWrite("Skipping unused type (it has no fn attribute): "+c.type),c.status="success",a.processed.push(c),Xmarks.Settings.SetSyncInfo(a),ProcessSyncType()):(Xmarks.LogWrite(c.type+" sync is currently disabled, skipping "+a.action),c.status="disabled",a.processed.push(c),
Xmarks.Settings.SetSyncInfo(a),ProcessSyncType())}}function CheckLastErrorPop(){var a=localStorage.getItem("lasterrorpop"),c=(new Date).getTime();if(null!=a&&a>c-864E5)return!1;localStorage.setItem("lasterrorpop",c);return!0}function ClearTryRepair(){localStorage.setItem("tryRepair","1")}function ShouldTryRepair(){if("1"==localStorage.getItem("tryRepair"))return!1;localStorage.setItem("tryRepair","0");return!0}
function ProcessSingleUpload(a,c){function b(b){function d(b,e){ResponseOK(b)?(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/upload"},Xmarks.GetRequestArgs({commands:e.set}))).Start(h):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_upload_commands_error"),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}function h(b){ResponseOK(b)?CompleteTransaction(g,b,c,a,ProcessSyncType):(2==b?(a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_upload_canceled")):
"object"==typeof b&&401==b.status?(a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_invalid_upload")):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_upload_error")),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}ResponseOK(b)||Xmarks.LogWrite("WARNING: Invalid response from Delete baseline data, uploaded data may get confused by baseline commands.  Attempting to continue.");b=new a.ds;var g=new Nodeset(b);g.FetchFromNative(a.suffix,function(){Xmarks.LogWrite("Providing commands");
g.ProvideCommandset(d)})}Xmarks.LogWrite("Starting upload: "+a.type);var d=Xmarks.Settings.GetUserHash();0!=Xmarks.Settings.GetInt(d+"profileid",0)?(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/download"},Xmarks.GetRequestArgs())).Start(function(b){function d(){g.Compare(m,function(d,j){function f(b){ResponseOK(b)?CompleteTransaction(g,b,c,a,ProcessSyncType):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_upload_profile_error")+": "+GetResponseDetails(b),
c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}if(ResponseOK(d))if(0<j.set.length){var h=Xmarks.GetRequestArgs({baserev:b.toprev,commands:j.set});(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/putchanges"},h)).Start(f)}else f({status:0,toprev:b.toprev});else a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_compare_error")+": "+GetResponseDetails(d),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()})}if(ResponseOK(b)){var h=
new a.ds,g=new Nodeset(h),k=new Commandset(b.commands);try{k.execute(g)}catch(j){Xmarks.LogWrite("Error processing download: "+JSON.stringify(j)+" e:"+j);a.status="error";a.statusMessage=chrome.i18n.getMessage("bg_download_error");c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType();return}var m=new Nodeset(h);m.FetchFromNative(a.suffix,d)}else a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_upload_canceled"),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}):
(Xmarks.LogWrite("Removing baseline so intermediate nodes aren't applied"),Xmarks.Settings.DeleteUserBaselineData(a.suffix,b))}
function ProcessSingleDownload(a,c){Xmarks.LogWrite("Starting download: "+a.type);(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/download"},Xmarks.GetRequestArgs())).Start(function(b){function d(e){function d(e){ResponseOK(e)?(Xmarks.LogWrite("Bookmarks written to local, clearing baseline data"),Xmarks.Settings.DeleteUserBaselineData(a.suffix,function(e){ResponseOK(e)||Xmarks.LogWrite("WARNING: Unable to clear baseline, download may not finish correctly");Xmarks.LogWrite("Baseline data cleared, completeling transaction");
CompleteTransaction(f,b,c,a,ProcessSyncType)})):(a.status="error",a.statusMessage="Error writing local bookmarks: "+GetResponseDetails(e),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}ResponseOK(e)?(Xmarks.LogWrite("Local bookmarks cleared, flushing new bookmarks to native"),f.FlushToNative(d)):(a.status="error",a.statusMessage="Error clearing local bookmarks: "+GetResponseDetails(e),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}Xmarks.LogWrite("Handling download callback");
if(ResponseOK(b)){var e=new a.ds,f=new Nodeset(e),e=new Commandset(b.commands);try{e.execute(f),f.ClearNative(d)}catch(h){Xmarks.LogWrite("Error processing download: "+JSON.stringify(h)+" e:"+h),a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_error_download_response")+": "+JSON.stringify(h)+" e:"+h,c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}}else{if(2==b)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_download_canceled");else if("object"==typeof b&&
401==b.status)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_invalid_download");else if("object"==typeof b&&404==b.status)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_no_user_data");else{if("object"==typeof b&&444==b.status){Xmarks.LogWrite("Server data does not exist, upload required");e=chrome.i18n.getMessage("bg_no_server_data",[a.type]);Xmarks.ShowDialog(e,{button1:chrome.i18n.getMessage("dialog_upload"),button2:chrome.i18n.getMessage("dialog_cancel")},function(b){Xmarks.LogWrite("MustUploadPromptCallback handling action: "+
b);b==chrome.i18n.getMessage("dialog_upload")?ProcessSingleUpload(a,c):(Xmarks.LogWrite("Canceling download"),a.status="skipped",a.statusMessage="No data on servers, you must do an upload",c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())});return}a.status="error";a.statusMessage=chrome.i18n.getMessage("bg_error_download_response")+": "+GetResponseDetails(b)}c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType()}})}
function ProcessSingleRepair(a,c){function b(b){if(ResponseOK(b)){Xmarks.LogWrite("Processing updates");var d=e.ProcessHashUpdates(b.updates),j=d[0];keep_cs=d[1];if(j.length){Xmarks.LogWrite("Resulting commandset: "+j.toJSONString());Xmarks.LogWrite("Reapply commandset: "+keep_cs.toJSONString());e.Execute(j);e.FlushToNative(function(d){self.ResponseOK(d)&&(Xmarks.LogWrite("Repair: Updates applied successfully"),CompleteTransaction(e,b,c,a,f,!0))});var f=function(){if(keep_cs.length){Xmarks.LogWrite("Repair: Applying rebase operations");
var c=new a.ds,c=new Nodeset(c,e);c.Execute(keep_cs);c.FlushToNative(function(a){self.ResponseOK(a)&&(Xmarks.Settings.Set("last-change",(new Date).getTime()),UpdateSyncUI())})}a.status="success";ProcessSyncType()}}else Xmarks.LogWrite("Nothing to see here; move along."),a.status="success",ProcessSyncType()}else a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_sync_stat"),a.status="success",ProcessSyncType()}Xmarks.LogWrite("Starting repair: "+a.type);var d=new a.ds,e=new Nodeset(d);d.Repair();
var f=["nid","url","name"];e.FetchFromNative(a.suffix,function(a){ResponseOK(a)&&e.HashTree(f,h)});var h=function(c){ResponseOK(c)&&(Xmarks.LogWrite("Repair: Fetch Diffs"),e.ProvideHashes(function(c,e){ResponseOK(c)&&(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/getdiffs"},Xmarks.GetRequestArgs({attrs:f,nodeset:e}))).Start(b)}))}}
function ProcessSingleSync(a,c){function b(b){!ResponseOK(b)||!Xmarks.Settings.GetInt(Xmarks.Settings.GetUserHash()+"rev"+a.suffix,0)?ResponseOK(b)?(Xmarks.LogWrite("Starting first time sync"),b.isreset?ProcessSingleUpload(a,c):(a.mergeType="local",ProcessSingleMerge(a,c))):(2==b?(a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_sync_canceled")):"object"==typeof b&&401==b.status?(a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_invalid_sync")):(a.status="error",a.statusMessage=
chrome.i18n.getMessage("bg_sync_stat")+": "+GetResponseDetails(b)),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()):(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/getchanges"},Xmarks.GetRequestArgs({baserev:Xmarks.Settings.Get(Xmarks.Settings.GetUserHash()+"rev"+a.suffix)}))).Start(d)}function d(b){function d(){if(Xmarks.Settings.GetBaseline(a.suffix))g();else{Xmarks.LogWrite("No baseline file found, pulling from server");var c=Xmarks.Settings.GetUserHash();
(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/download"},Xmarks.GetRequestArgs({rev:Xmarks.Settings.GetInt(c+"rev"+a.suffix)}))).Start(h)}}function h(b){if(ResponseOK(b)){var d=new a.ds,d=new Nodeset(d);b=new Commandset(b.commands);try{b.execute(d),Xmarks.Settings.SetBaseline(d,a.suffix,!1,function(){Xmarks.LogWrite("Baseline updated, continuing sync");g()})}catch(e){Xmarks.LogWrite("Error processing download: "+JSON.stringify(e)+" e:"+e),a.status="error",a.statusMessage=
chrome.i18n.getMessage("bg_baseline_download_error")+": "+JSON.stringify(e)+" e:"+e,c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}}else a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_baseline_error")+": "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}function g(){function d(j,g){function k(b){function d(b,e){if(ResponseOK(b))try{Xmarks.LogWrite("Synchronizing changes"),Synchronize(Xmarks.Settings.GetBaseline(a.suffix),
e,g,l,h,n),ClearTryRepair()}catch(f){console.error(f);"number"==typeof f?(a.status="error",a.statusMessage="Error during sync ("+f+"); manually starting a download from the advanced tab should reset things."):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_unknown_sync_error")+": "+JSON.stringify(f)+" exception:"+f);c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType();var j=function(a){Xmarks.LogWrite("SyncErrorPromptCallback handling action: "+a);a==chrome.i18n.getMessage("dialog_download")&&
HandleAction("download")};if(ShouldTryRepair())HandleAction("repair");else if(CheckLastErrorPop()){var k=chrome.i18n.getMessage("dialog_error_download");Xmarks.ShowDialog(k,{button1:chrome.i18n.getMessage("dialog_download"),button2:chrome.i18n.getMessage("dialog_cancel")},j,null,290)}}else a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_compare_error")+": "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}ResponseOK(b)?(Xmarks.LogWrite("Comparing baseline to local"),
(new Nodeset(f,Xmarks.Settings.GetBaseline(a.suffix))).Compare(l,d)):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_error_local_loaded")+": "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}function n(d,f){function j(){0<d.set.length?(Xmarks.LogWrite("Sending local changes to server"),(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/putchanges"},Xmarks.GetRequestArgs({baserev:b.toprev,commands:d.set}))).Start(h)):
h({status:0,toprev:b.toprev})}function h(b){ResponseOK(b)?CompleteTransaction(l,b,c,a,ProcessSyncType):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_sync_changes_error")+": "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}0<f.set.length?(Xmarks.LogWrite("Applying server changes to Chrome"),f.execute(l),l.FlushToNative(j)):j()}if(ResponseOK(j)){var l=new Nodeset(f);l.FetchFromNative(a.suffix,k)}else Xmarks.LogWrite("Error processing download: "+
j),a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_error_build_mcs")+": "+GetResponseDetails(j),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}Xmarks.LogWrite("Comparing baseline to server");var f=new a.ds,h=new Nodeset(f,b.continuous?Xmarks.Settings.GetBaseline(a.suffix):null);Xmarks.LogWrite("Created nodeset");0<b.commands.length?((new Commandset(b.commands)).execute(h),(new Nodeset(f,Xmarks.Settings.GetBaseline(a.suffix))).Compare(h,d)):d(0,new Commandset)}if(ResponseOK(b))!b.toprev||
!b.commands?(Xmarks.LogWrite("Invalid sync response: "+JSON.stringify(b)),a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_invalid_sync_response")+": "+JSON.stringify(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()):!b.continuous&&!b.substituted?(Xmarks.LogWrite("Response was not continuous, user needs to sync or download"),k=chrome.i18n.getMessage("bg_not_continuous",[a.type]),Xmarks.ShowDialog(k,{button1:chrome.i18n.getMessage("dialog_sync"),button2:chrome.i18n.getMessage("dialog_download"),
button3:chrome.i18n.getMessage("dialog_cancel")},function(b){Xmarks.LogWrite("DiscontinuityPromptCallback handling action: "+b);b==chrome.i18n.getMessage("dialog_sync")?Xmarks.Settings.LoadLocalBaseline(a,d):b==chrome.i18n.getMessage("dialog_download")?ProcessSingleDownload(a,c):(Xmarks.LogWrite("Canceling sync"),a.status="skipped",c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())})):Xmarks.Settings.LoadLocalBaseline(a,d);else if("object"==typeof b&&444==b.status){Xmarks.LogWrite("Server data does not exist, upload required");
var k=chrome.i18n.getMessage("bg_no_server_data",[a.type]);Xmarks.ShowDialog(k,{button1:chrome.i18n.getMessage("dialog_upload"),button2:chrome.i18n.getMessage("dialog_cancel")},function(b){Xmarks.LogWrite("MustUploadPromptCallback handling action: "+b);b==chrome.i18n.getMessage("dialog_upload")?ProcessSingleUpload(a,c):(Xmarks.LogWrite("Canceling download"),a.status="skipped",a.statusMessage="No data on servers, you must do an upload",downloadData.processed.push(a),Xmarks.Settings.SetSyncInfo(c),
ProcessSyncType())})}else"object"==typeof b&&401==b.status?(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_invalid_sync"),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType(),UnauthenticateUser(function(){}),AuthenticateUser(function(){HandleAction("sync")})):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_sync_response")+": "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}Xmarks.Settings.GetInt(Xmarks.Settings.GetUserHash()+
"rev"+a.suffix,0)?b(0):(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/status"},Xmarks.GetRequestArgs())).Start(b)}
function ProcessSingleMerge(a,c){a.mergeType||(a.mergeType="local");Xmarks.LogWrite("Starting a merge: "+a.mergeType);(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/download"},Xmarks.GetRequestArgs())).Start(function(b){function d(){function d(b){ResponseOK(b)?f.Compare(g,h):(a.status="error",a.statusMessage="Error merging node sets: "+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}function h(d,e){function f(b){ResponseOK(b)?
j(b):(a.status="error",a.statusMessage=chrome.i18n.getMessage("bg_merge_putchanges")+GetResponseDetails(b),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())}function j(b){g.FlushToNative(function(){CompleteTransaction(g,b,c,a,ProcessSyncType)})}if(ResponseOK(d))if(0<e.set.length){var k=Xmarks.GetRequestArgs({baserev:b.toprev,commands:e.set});(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/putchanges"},k)).Start(f)}else j(b);else a.status="error",
a.statusMessage=chrome.i18n.getMessage("bg_error_build_mcs")+": "+GetResponseDetails(d),c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType()}var g;Xmarks.LogWrite("Merging nodesets");"local"==a.mergeType?(g=new Nodeset(e,k),g.Merge(f,d)):(g=new Nodeset(e,f),g.Merge(k,d))}if(ResponseOK(b)){var e=new a.ds,f=new Nodeset(e),h=new Commandset(b.commands);try{h.execute(f)}catch(g){Xmarks.LogWrite("Error processing merge download: "+JSON.stringify(g)+" e:"+g);a.status="error";a.statusMessage=
chrome.i18n.getMessage("bg_download_error")+": "+JSON.stringify(g)+" e:"+g;c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType();return}var k=new Nodeset(e);k.FetchFromNative(a.suffix,d)}else{if(2==b)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_download_canceled");else if("object"==typeof b&&401==b.status)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_invalid_download");else if("object"==typeof b&&404==b.status)a.status="skipped",a.statusMessage=chrome.i18n.getMessage("bg_no_user_data");
else{if("object"==typeof b&&444==b.status){Xmarks.LogWrite("Server data does not exist, upload required");h=chrome.i18n.getMessage("bg_no_server_data",[a.type]);Xmarks.ShowDialog(h,{button1:chrome.i18n.getMessage("dialog_upload"),button2:chrome.i18n.getMessage("dialog_cancel")},function(b){Xmarks.LogWrite("MustUploadPromptCallback handling action: "+b);b==chrome.i18n.getMessage("dialog_upload")?ProcessSingleUpload(a,c):(Xmarks.LogWrite("Canceling download"),a.status="skipped",a.statusMessage="No data on servers, you must do an upload",
c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())});return}a.status="error";a.statusMessage=chrome.i18n.getMessage("bg_error_download_response")+": "+GetResponseDetails(b)}c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType()}})}
function ProcessSinglePurge(a,c){(new Request("POST",{host:Xmarks.Settings.Get("syncserver"),path:"/sync/"+a.type+"/purge"},Xmarks.GetRequestArgs({mode:"data"}))).Start(function(b){ResponseOK(b)?CompleteTransaction(null,{toprev:0},c,a,ProcessSyncType):(2==b?(a.status="skipped",a.statusMessage="Purge canceled"):"object"==typeof b&&401==b.status?(a.status="skipped",a.statusMessage="Invalid purge response"):(a.status="error",a.statusMessage="Purge error: "+GetResponseDetails(b)),c.processed.push(a),
Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())})}
function CompleteTransaction(a,c,b,d,e,f){function h(){Xmarks.Settings.Set(g+"lastsync",(new Date).getTime(),!0);c.auth&&Xmarks.Settings.Set(g+"authtoken",c.auth);Xmarks.LogWrite(d.type+" completed, marking successful");d.status="success";b.processed.push(d);Xmarks.Settings.SetSyncInfo(b);e()}if(Xmarks.Settings.Get("sync-error"))d.status="error",d.statusMessage=Xmarks.Settings.Get("sync-error"),b.processed.push(d),e();else{var g=Xmarks.Settings.GetUserHash();0==Xmarks.Settings.Get(g+"rev"+d.suffix,
0)&&Xmarks.Settings.Set(g+"firstSync",!0);Xmarks.Settings.Set(g+"rev"+d.suffix,c.toprev,!0);Xmarks.Settings.SetBaseline(a,d.suffix,!0,h,f)}}
function HandleHeartbeat(){var a=Xmarks.Settings.GetInt(Xmarks.Settings.GetUserHash()+"lastsync",0);Xmarks.Settings.GetInt("last-change",0);var c=1E3*Xmarks.Settings.GetInt("autosync-freq",3600),b=(new Date).getTime(),d=Xmarks.Settings.GetInt("app-start",0);0==d&&(Xmarks.Settings.Set("app-start",b),d=b);var e=0,e=0<a?b-a:b-d,a=IsActive(),f=Xmarks.Settings.GetInt("backoff-until",0);Xmarks.Settings.GetBool("enable-auto-sync","true")&&(b>f&&!a)&&(e>c?(Xmarks.LogWrite("Triggering auto-sync"),Xmarks.Settings.Set("auto-sync",
!0),HandleAction("sync")):(c=Xmarks.Settings.GetInt("last-tab-sync",0),e=1E3*Xmarks.Settings.GetInt("autotabsync-freq",600),a=0,a=0<c?b-c:b-d,Xmarks.Settings.GetBool("sync-type-tabs","false")&&a>e&&(Xmarks.LogWrite("Triggering tab auto-sync"),Xmarks.Settings.Set("auto-sync",!0),WriteTabs({force:!1},{toProcess:[],processed:[],action:"auto tab sync"}))));setTimeout(HandleHeartbeat,12E4)}
function UpdateSyncUI(){var a=GetStatusDetails();chrome.browserAction.setTitle({title:a.badgeTitle});a.badgeText&&a.badgeColor?(chrome.browserAction.setBadgeBackgroundColor({color:a.badgeColor}),chrome.browserAction.setBadgeText({text:a.badgeText})):chrome.browserAction.setBadgeText({text:""});var c=chrome.extension.getViews(),b;for(b in c)"function"==typeof c[b].HandleSyncStatusChange&&c[b].HandleSyncStatusChange(a)}
function IsActive(){var a=Xmarks.Settings.Get("current-action");if(!a)return null;var c=Xmarks.Settings.GetInt("current-action-ts",0);return 864E5<(new Date).getTime()-c?(Xmarks.Settings.Remove("current-action"),null):a}
function SetNewAction(a){var c=IsActive();if(c)return!1==Xmarks.Settings.Get("auto-sync",!1)&&(a=chrome.i18n.getMessage("bg_currently_busy",[c])+'<div style="font-size: 8pt; margin-top: 15px">'+chrome.i18n.getMessage("bg_possible_error",['<a href="http://helpdesk.xmarks.com/troubleshooting/chrome-troubleshooting/" target="_blank">',"</a>"])+"</div>",Xmarks.ShowDialog(a)),!1;Xmarks.Settings.Set("current-action",a);Xmarks.Settings.Set("current-action-ts",(new Date).getTime());Xmarks.Settings.Remove("sync-error");
return!0}
function ResetSyncAction(){var a="",c=Xmarks.Settings.GetSyncInfo();if(c&&c.processed)for(var b=0;b<c.processed.length;b++)if("error"==c.processed[b].status){Xmarks.Settings.Set("sync-error",c.processed[b].type+" error: "+c.processed[b].statusMessage);reportErrorServer(c.processed[b].type+" error: "+c.processed[b].statusMessage);a="error";break}else"success"==c.processed[b].status&&(a="good");Xmarks.Settings.SetSyncInfo(null);a||(Xmarks.Settings.Get("saved-status",null)?(a=Xmarks.Settings.Get("saved-status"),Xmarks.Settings.Remove("saved-status")):
a="good");if("good"==a)Xmarks.Settings.Set("failcount",0),b=Xmarks.Settings.GetUserHash(),!0==Xmarks.Settings.GetBool(b+"firstSync","false")&&(Xmarks.Settings.Remove(b+"firstSync"),Xmarks.Settings.GetBool(b+"shownSuccess","true")||(Xmarks.Settings.Set(b+"shownSuccess",!0,!0),ShowSuccessPage("success")));else{var c=Xmarks.Settings.GetInt("backoff-until",0),d=Xmarks.Settings.GetInt("failcount",0)+1;7<d&&(d=7);for(var e=4,b=1;b<d;b++)e+=e;b=(new Date).getTime()+6E4*e;c>b&&(b=c);Xmarks.Settings.Set("failcount",
d);Xmarks.Settings.Set("backoff-until",b)}Xmarks.Settings.Set("sync-status",a);Xmarks.Settings.Remove("current-action");Xmarks.Settings.Remove("auto-sync");CreateLocalChangeHandlers();if(a=Xmarks.Settings.GetPostSyncCallback())a(),Xmarks.Settings.SetPostSyncCallback(null)}var lasterrortime=0;
function reportErrorServer(a){try{var c=(new Date).getTime(),b=parseInt(c/1E3);if(!(lasterrortime>b-5)){lasterrortime=b;var d=new XMLHttpRequest;d.onreadystatechange=function(){};d.onerror=function(){};d.open("POST","https://buy.xmarks.com/syncerr.php",!0);d.setRequestHeader("Content-Type","application/x-www-form-urlencoded");d.send("msg="+encodeURIComponent(a)+"&username="+encodeURIComponent(Xmarks.Settings.Get("current-username"))+"&client=cr"+encodeURIComponent(Xmarks.Settings.Get("version")))}}catch(e){}}
function ResponseOK(a){if("number"==typeof a)return a?(Xmarks.LogWrite("Invalid response number: "+a),!1):!0;if("object"==typeof a){if(a.status){Xmarks.LogWrite("Invalid response object: "+JSON.stringify(a));-3==a.status&&(Xmarks.Settings.Get("syncserver")=="sync."+Xmarks.Settings.Get("server-root")?Xmarks.Settings.Set("syncserver","sync2."+Xmarks.Settings.Get("server-root")):Xmarks.Settings.Get("syncserver")=="sync2."+Xmarks.Settings.Get("server-root")&&Xmarks.Settings.Set("syncserver","sync."+Xmarks.Settings.Get("server-root")),
Xmarks.LogWrite("Switching sync server:"+Xmarks.Settings.Get("syncserver")));var c=function(a){Xmarks.LogWrite("SyncErrorPromptCallback handling action: "+a);a==chrome.i18n.getMessage("dialog_download")&&HandleAction("download")};-3!=a.status&&CheckLastErrorPop()&&(a=chrome.i18n.getMessage("dialog_error_download"),Xmarks.ShowDialog(a,{button1:chrome.i18n.getMessage("dialog_download"),button2:chrome.i18n.getMessage("dialog_cancel")},c,null,290));return!1}return!0}Xmarks.LogWrite("Invalid unknown response: "+
a);return!1}function GetResponseDetails(a){return"number"==typeof a?a?"Invalid response number: "+a:"ok":"object"==typeof a?a.status?"Invalid response object: "+JSON.stringify(a):"ok":"Invalid unknown response: "+a}
function WriteTabs(a,c){chrome.windows.getAll({populate:!0},function(b){for(var d=[],e=0;e<b.length;e++){var f=b[e];if(!f.incognito){var h=[];if(f.tabs)for(var g=0;g<f.tabs.length;g++){var k=f.tabs[g];0==k.url.indexOf("http")&&h.push({url:k.url,title:k.title,icon:k.favIconUrl})}h.length&&d.push({tabs:h})}}a.force||Xmarks.Settings.WindowSetChanged(d)?(Xmarks.LogWrite("Sending new tab state"),(new Request("POST",{host:Xmarks.Settings.Get("cloudserver"),path:"/cloud/tabs/write"},{mymid:Xmarks.Settings.GetMachineId(),
data:{clientName:Xmarks.Settings.Get("sync-computer-name"),browserName:"chrome",windows:d}})).Start(function(b){b.status?(Xmarks.LogWrite("Error sending tabs to server: "+b.status),a.result="error",a.statusMessage="Error sending tabs to server: "+b.status):(Xmarks.Settings.SaveWindowSet(d),b=new Date,Xmarks.Settings.Set(Xmarks.Settings.GetUserHash()+"lastsync",b.getTime(),!0),Xmarks.Settings.Set("last-tab-sync",b.getTime()),a.status="success");c.processed.push(a);Xmarks.Settings.SetSyncInfo(c);ProcessSyncType()})):
(Xmarks.LogWrite("Tab state is the same, not sending tab data"),a.status="skipped",a.statusMessage="Open tabs unchanged",c.processed.push(a),Xmarks.Settings.SetSyncInfo(c),ProcessSyncType())})}
function LoadRemoteTabData(a){(new Request("POST",{host:Xmarks.Settings.Get("cloudserver"),path:"/cloud/tabs/read"},{mymid:Xmarks.Settings.GetMachineId()})).Start(function(c){if(c.status||!c.mids)a(c.status||500);else{var b={};forEach(c.mids,function(a,c){if(c!=Xmarks.Settings.GetMachineId()){var f=a.clientName||"Unknown";f in b||(b[f]={mids:{}});b[f].mids[c]=a}});forEach(b,function(a){a.length=0;forEach(a.mids,function(b){b.length=0;forEach(b.windows,function(c){a.length+=c.tabs.length;b.length+=
c.tabs.length})})});a(0,b)}})}
function GetStatusDetails(){var a="good",c=Xmarks.Settings.GetSyncInfo();if(c)if(0<c.toProcess.length)a="active";else for(var b=0;b<c.processed.length;b++)"error"==c.processed[b].status&&(a="error");else IsActive()?a="active":(a=Xmarks.Settings.GetInt("last-change",0),b=Xmarks.Settings.GetInt(Xmarks.Settings.GetUserHash()+"lastsync",0),a=a>b?"dirty":Xmarks.Settings.Get("sync-status","good"));var b=chrome.i18n.getMessage("bg_syncing_successfully"),d=chrome.i18n.getMessage("browser_action_tooltip_default"),e=
null,f=null;"dirty"==a?(d=b=chrome.i18n.getMessage("bg_changes_to_sync"),e="!",f=[255,247,153,255]):"error"==a?(d=b=chrome.i18n.getMessage("bg_general_error"),e="?",f=[207,0,22,255]):"active"==a&&(d=b=chrome.i18n.getMessage("bg_sync_in_progress"),e="!",f=[0,202,80,255]);return{syncStatus:a,syncText:b,badgeTitle:d,badgeText:e,badgeColor:f,syncInfo:c}};
