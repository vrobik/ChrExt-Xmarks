From ea95b40b3124708a5ea6928685c16d139109d766 Mon Sep 17 00:00:00 2001
From: Bob Copeland <copeland@lastpass.com>
Date: Wed, 28 Jun 2017 16:59:37 -0400
Subject: [PATCH] LS-1360 drop a bunch of password stuff

---
 apps/clients/chrome/src/trunk/background.html      |   1 -
 apps/clients/chrome/src/trunk/background.js        | 300 +----------
 apps/clients/chrome/src/trunk/foxmarks-password.js | 734 ---------------------------
 apps/clients/chrome/src/trunk/passwordinsert.js    | 371 --------------
 apps/clients/chrome/src/trunk/passwordmanager.html | 258 ----------
 apps/clients/chrome/src/trunk/passwordmanager.js   | 380 --------------
 apps/clients/chrome/src/trunk/settings.html        |  14 +-
 apps/clients/chrome/src/trunk/settings.js          |  62 ---
 apps/clients/chrome/src/trunk/xmarks-nodelist.js   |   2 +-
 9 files changed, 4 insertions(+), 2118 deletions(-)
 delete mode 100644 apps/clients/chrome/src/trunk/foxmarks-password.js
 delete mode 100644 apps/clients/chrome/src/trunk/passwordinsert.js
 delete mode 100644 apps/clients/chrome/src/trunk/passwordmanager.html
 delete mode 100644 apps/clients/chrome/src/trunk/passwordmanager.js

diff --git a/apps/clients/chrome/src/trunk/background.html b/apps/clients/chrome/src/trunk/background.html
index ea8293cae8..944bc5cee9 100755
--- a/apps/clients/chrome/src/trunk/background.html
+++ b/apps/clients/chrome/src/trunk/background.html
@@ -8,7 +8,6 @@
 <script type="text/javascript" src="xmarks-chromemarks.js"></script>
 <script type="text/javascript" src="Base64.js"></script>
 <script type="text/javascript" src="CreateAESManager.js"></script>
-<script type="text/javascript" src="foxmarks-password.js"></script>
 <script type="text/javascript" src="foxmarks-network.js"></script>
 <script type="text/javascript" src="foxmarks-core.js"></script>
 <script type="text/javascript" src="xmarks-sync.js"></script>
diff --git a/apps/clients/chrome/src/trunk/background.js b/apps/clients/chrome/src/trunk/background.js
index f0e19997e1..f1794306a9 100755
--- a/apps/clients/chrome/src/trunk/background.js
+++ b/apps/clients/chrome/src/trunk/background.js
@@ -4,7 +4,6 @@
 function StartUpload(params) {
     var uploadData = {toProcess: [], processed: [], action: "upload"};
     var uploadTypes = [{type: "bookmarks", defaultEnabled: "true", ds: BookmarkDatasource, suffix: "", fn: ProcessSingleUpload},
-                       {type: "passwords", defaultEnabled: "false", ds: PasswordDatasource, suffix: "-passwords", fn: ProcessSingleUpload},
                        {type: "tabs", defaultEnabled: "false", force: true, fn: WriteTabs}];
     for (var i = 0; i < uploadTypes.length; i++) {
         if (!params.dataType || params.dataType == uploadTypes[i].type) {
@@ -35,7 +34,6 @@ function StartUpload(params) {
 function StartMerge(params) {
     var mergeData = {toProcess: [], processed: [], action: "merge"};
     var mergeTypes = [{type: "bookmarks", defaultEnabled: "true", ds: BookmarkDatasource, suffix: "", mergeType: params.type, fn: ProcessSingleMerge},
-                      {type: "passwords", defaultEnabled: "false", ds: PasswordDatasource, suffix: "-passwords", mergeType: params.type, fn: ProcessSingleMerge},
                       {type: "tabs", defaultEnabled: "false"}];
     for (var i = 0; i < mergeTypes.length; i++) {
         if (!params.dataType || params.dataType == mergeTypes[i].type) {
@@ -52,7 +50,6 @@ function StartMerge(params) {
 function StartSync(params) {
     var syncData = {toProcess: [], processed: [], action: "synchronization"};
     var syncTypes = [{type: "bookmarks", defaultEnabled: "true", ds: BookmarkDatasource, suffix: "", fn: ProcessSingleSync},
-                     {type: "passwords", defaultEnabled: "false", ds: PasswordDatasource, suffix: "-passwords", fn: ProcessSingleSync},
                      {type: "tabs", defaultEnabled: "true", force: false, fn: WriteTabs}];
     for (var i = 0; i < syncTypes.length; i++) {
         if (!params.dataType || params.dataType == syncTypes[i].type) {
@@ -86,7 +83,6 @@ function StartRepair(params) {
 function StartDownload(params) {
     var downloadData = {toProcess: [], processed: [], action: "download"};
     var downloadTypes = [{type: "bookmarks", defaultEnabled: "true", ds: BookmarkDatasource, suffix: "", fn: ProcessSingleDownload},
-                         {type: "passwords", defaultEnabled: "false", ds: PasswordDatasource, suffix: "-passwords", fn: ProcessSingleDownload},
                          {type: "tabs", defaultEnabled: "false"}];
     for (var i = 0; i < downloadTypes.length; i++) {
         if (!params.dataType || params.dataType == downloadTypes[i].type) {
@@ -178,7 +174,6 @@ function UnauthenticateUser(callback) {
     }
 
     Xmarks.Settings.SetUserSettings({"remember": true});
-    PasswordStore.LoadPasswordDb();
     UpdateTabListener();
     ResetSyncAction();
     callback();
@@ -216,7 +211,6 @@ function AuthenticateUser(callback, forceRequest) {
                 Xmarks.LogWrite("Authenticated as: " + Xmarks.Settings.Get("current-username"));
             }
 
-            PasswordStore.LoadPasswordDb();
             UpdateTabListener();
             ResetSyncAction();
             callback();
@@ -256,94 +250,7 @@ function ExtensionListener(request, sender, sendResponse) {
     }
     Xmarks.LogWrite("Got message from content script: " + request["requestType"]);
 
-    if (request["requestType"] == "promptSavePassword") {
-        // passwordinsert.js
-        if (sender && sender.tab && request.promptData) {
-            // Does the user not want to be asked for this site?
-            if (PasswordStore.IsInExceptionList(request.promptData.url)) {
-                Xmarks.LogWrite("Password's page is in exception list, not prompting.");
-                return;
-            }
-
-            // Check to see if the password data is new/modified or the same as what we already have
-            var matchData = PasswordStore.CheckForMatch(request.promptData.url);
-            var promptType = "new";
-            for (var i = 0; i < matchData.length; i++) {
-                var aMatch = matchData[i];
-                if (aMatch.username == request.promptData.username) {
-                    if (aMatch.password == request.promptData.password) {
-                        promptType = "none";
-                    } else {
-                        promptType = "update";
-                    }
-                    break;
-                } else if (aMatch.password == request.promptData.password && request.promptData.usernameField == "") {
-                    // Sites like flickr automatically remember the user's name and only prompt for a password.
-                    // In this case we already have saved information for the username/password combo, but will then prompt
-                    // the user again if they authenticate through the site and don't have to insert their username
-                    promptType = "none";
-                    break;
-                }
-            }
-
-            if (promptType == "new" || promptType == "update") {
-                Xmarks.LogWrite("Saving password prompt data [" + promptType + "] for url: " + request.promptData.url);
-                request.promptData.type = promptType;
-                request.promptData.timestamp = new Date().getTime();
-                Xmarks.Settings.Set("passwordPromptData-" + sender.tab.windowId + "-" + sender.tab.id, JSON.stringify(request.promptData));
-            } else {
-                Xmarks.LogWrite("No change in password data, ignoring");
-            }
-        }
-        return;
-    } else if (request["requestType"] == "savePassword") {
-        // Build a new password node, add it to our local storage
-        var login = request.promptData;
-        Xmarks.LogWrite("Saving password data for: " + login.url);
-
-        login.hostname = Xmarks.ExtractProtocolAndDomain(login.url);
-        if (login.hostname == null) {
-            Xmarks.LogWrite("Cannot add password data, host is null");
-            return;
-        }
-
-        login.formSubmitURL = Xmarks.ExtractProtocolAndDomain(login.formAction);
-        if (login.formSubmitURL == null) {
-            login.formSubmitURL = login.hostname;
-        }
-
-        if (login.password == null || login.password.length == 0 || login.passwordField == null || login.passwordField.length == 0) {
-            Xmarks.LogWrite("Cannot add password data, password or passwordField is empty");
-            return;
-        }
-
-        if (login.username == null || login.usernameField == null) {
-            Xmarks.LogWrite("Cannot add password data, username or usernameField is null");
-            return;
-        }
-
-        login.httpRealm = null;
-        var privateData = {"ntype": "password",
-                           "hostname": login.hostname,
-                           "formSubmitURL": login.formSubmitURL,
-                           "httpRealm": login.httpRealm,
-                           "username": login.username,
-                           "usernameField": login.usernameField,
-                           "password": login.password,
-                           "passwordField": login.passwordField,
-                           "pnid": NODE_ROOT};
-
-        var newNid = PasswordStore.GenerateNid(login);
-        var pwNode = new Node(newNid, {"ntype": "password", "private": privateData, "pnid": NODE_ROOT});
-        PasswordStore.encode(pwNode);
-        PasswordStore.AddNode(pwNode);
-        var d = new Date();
-        Xmarks.Settings.Set("last-change", d.getTime());
-        UpdateSyncUI();
-    } else if (request["requestType"] == "exceptionPassword") {
-        // User doesn't want to be asked to save passwords for this site
-        PasswordStore.AddException(request.promptData.url);
-    } else if (request["requestType"] == "setupWizard") {
+    if (request["requestType"] == "setupWizard") {
         // setupwizardinsert.js
         chrome.windows.remove(sender.tab.windowId);
 
@@ -584,212 +491,7 @@ function LocalBookmarkChangeHandler(id, info) {
 }
 
 /*
- * Handles page turns for password sync.  If password sync is enabled and the URL matches something
- * in our password database, insert password sync content script.
- */
-function TabUpdateListener(tabId, changeInfo, tab) {
-    if (changeInfo.status != "loading" || tab.url.indexOf("http") != 0 || !Xmarks.Settings.GetBool("sync-type-passwords", "false")) {
-        return;
-    }
-    
-    // Page is complete and password sync is on, insert content script
-    chrome.tabs.executeScript(tabId, {'file': 'passwordinsert.js', 'allFrames': true}, ContentScriptInserted);
-    
-    function ContentScriptInserted() {
-        if (!Xmarks.Settings.Get(Xmarks.Settings.GetUserHash() + "password-pin")) {
-            // No pin saved, we need it before we can do anything
-            Xmarks.VerifyUserPin(ContinueInsert, PasswordStore.DoesPinUnlockLocalData)
-        } else {
-            ContinueInsert({hasPin: true});
-        }
-
-        function ContinueInsert(pinData) {
-            if (!pinData.hasPin) {
-                Xmarks.LogWrite("No valid PIN data, cannot insert password manager");
-                return;
-            }
-
-            if (pinData.encodedPin) {
-                Xmarks.Settings.Set(Xmarks.Settings.GetUserHash() + "password-pin", pinData.encodedPin, pinData.persist);
-            }
-
-            var matchData = PasswordStore.CheckForMatch(tab.url);
-            if (matchData.length) {
-                // We have some matches, insert content script and pass matches in
-                Xmarks.LogWrite("Potential passwords found for [" + tab.url + "], sending to content script");
-                if (typeof(chrome.runtime) != 'undefined') {
-                  chrome.tabs.sendMessage(tabId, {'message': 'passwords', 'data': {'matches': matchData, 'showUi': Xmarks.Settings.GetBool("show-autofill-ui", "true")}});
-                } else {
-                  chrome.tabs.sendRequest(tabId, {'message': 'passwords', 'data': {'matches': matchData, 'showUi': Xmarks.Settings.GetBool("show-autofill-ui", "true")}});
-                }
-            }
-
-            // Check to see if we should prompt to save password data
-            var promptData = Xmarks.Settings.Get("passwordPromptData-" + tab.windowId + "-" + tab.id, null)
-            if (promptData) {
-                var now = new Date().getTime();
-                var promptDataObj = JSON.parse(promptData);
-                if (now < (promptDataObj.timestamp + 10000)) {
-                    Xmarks.LogWrite("Found password prompt data and still in timestamp window, sending to tab");
-                    if (typeof(chrome.runtime) != 'undefined') {
-                      chrome.tabs.sendMessage(tabId, {'message': 'promptSave', 'data': promptDataObj});
-                    } else {
-                      chrome.tabs.sendRequest(tabId, {'message': 'promptSave', 'data': promptDataObj});
-                    }
-                } else {
-                    Xmarks.LogWrite("Password prompt data has expired, removing");
-                    Xmarks.Settings.Remove("passwordPromptData-" + tab.windowId + "-" + tab.id);
-                }
-            }
-        }
-    }
-}
-
-/*
  * Determine if we should enable password sync event listeners.
  */
 function UpdateTabListener() {
-    if (Xmarks.Settings.GetBool("sync-type-passwords", "false") && Xmarks.Settings.Get("current-username")) {
-        Xmarks.LogWrite("Password sync is enabled, adding TabUpdate listener");
-        chrome.tabs.onUpdated.addListener(TabUpdateListener);
-    } else if (chrome.tabs.onUpdated.hasListener(TabUpdateListener)) {
-        chrome.tabs.onUpdated.removeListener(TabUpdateListener);
-    }
-}
-
-/*
- * Gets the current password state
- */
-function GetPasswordState(stateCallback) {
-    var request = new Request("POST", {"host": Xmarks.Settings.Get("syncserver"), "path": "/sync/passwords/state"}, Xmarks.GetRequestArgs({'depth': 'self'}));
-    request.Start(StateResponse);
-
-    function StateResponse(response) {
-        Xmarks.LogWrite("Handling password state callback");
-        if (!ResponseOK(response)) {
-            var errorResponse = "";
-            if (response == 2) {
-                Xmarks.LogWrite("Password state call canceled, no password sync");
-                errorResponse = "User authentication canceled.";
-            } else if (typeof response == "object" && response["status"] == 401) {
-                Xmarks.LogWrite("Authentication for password state invalid, no password sync");
-                errorResponse = "Invalid user authentication.";
-            } else if (typeof response == "object" && response["status"] == 404) {
-                // Valid response, user has no password data
-                Xmarks.LogWrite("Got 404 response, user has never had password sync");
-                stateCallback({});
-                return;
-            } else {
-                Xmarks.LogWrite("Unknown response, no password sync");
-                errorResponse = "Error during user authentication.";
-            }
-            stateCallback({error: errorResponse});
-            return;
-        }
-
-        stateCallback(response);
-    }
-}
-
-/*
- * Enables password sync
- */
-function TurnOnPasswordSync(pin, persist) {
-    if (!Xmarks.Settings.Get("current-username")) {
-        Xmarks.LogWrite("Not currently signed in, cannot enable password sync!");
-        return;
-    }
-
-    // Attempt to salvage any local password data
-    if (Xmarks.Settings.Get(Xmarks.Settings.GetUserHash() + "password-pin")) {
-        PasswordStore.DecodeAll();
-        Xmarks.Settings.Remove(Xmarks.Settings.GetUserHash() + "password-pin"); // Ensure persisted data is removed
-    }
-
-    Xmarks.Settings.Set(Xmarks.Settings.GetUserHash() + "password-pin", Base64.encode(pin), persist);
-
-    // Reencode any passwords we have with new PIN
-    PasswordStore.EncodeAll();
-
-    Xmarks.Settings.Set("sync-type-passwords", true, true);
-    Xmarks.Settings.Set("securityLevel", 1, true);
-    UpdateTabListener();
-}
-
-/*
- * Disables password sync
- */
-function TurnOffPasswordSync() {
-    Xmarks.Settings.Set("sync-type-passwords", false, true);
-    UpdateTabListener();
-    UpdateSyncUI();
-}
-
-/*
- * Remove all local password sync data
- */
-function ClearLocalPasswordData(callback) {
-    if (!Xmarks.Settings.Get("current-username")) {
-        Xmarks.LogWrite("Not currently signed in, cannot clear local password data!");
-        return;
-    }
-
-    Xmarks.Settings.Remove(Xmarks.Settings.GetUserHash() + "password-pin");
-    Xmarks.Settings.Remove(Xmarks.Settings.GetUserHash() + "rev-passwords");
-    PasswordStore.DeleteLocalExceptions();
-    PasswordStore.ClearLocalStore(FinishClear);
-
-    function FinishClear() {
-        TurnOffPasswordSync();
-        callback();
-    }
-}
-
-/*
- * Removes a nid from the password store and updates the UI to show a change is ready
- */
-function RemovePasswordNid(nid) {
-    if (PasswordStore.RemoveNode(nid)) {
-        var d = new Date();
-        Xmarks.Settings.Set("last-change", d.getTime());
-        UpdateSyncUI();
-        return true;
-    }
-
-    return false;
-}
-
-/*
- * Removes an exception from the password store and updates the UI to refresh any viewers
- */
-function RemovePasswordException(domain) {
-    if (PasswordStore.RemoveException(domain)) {
-        UpdateSyncUI();
-        return true;
-    }
-
-    return false;
-}
-
-/*
- * Startup work
- */
-var PasswordStore = new PasswordDatasource(); // Hack: we need to get DB calls started so datasource is fully loaded when someone needs to use it :(
-if (typeof(chrome.runtime) != 'undefined') {
-  chrome.runtime.onMessage.addListener(ExtensionListener);
-} else {
-  chrome.extension.onRequest.addListener(ExtensionListener);
 }
-UpdateTabListener();
-
-window.onerror = function(e) {
-    // if we get any unhandled javascript exception, clear the sync
-    // action so user can try repair.
-    Xmarks.LogWrite(e);
-    Xmarks.Settings.Remove("current-action");
-};
-
-// Hack: Chrome bug #28136 means we can't set event handlers until we query the bookmark
-// API first.  Make a dummy call before triggering handlers.
-chrome.bookmarks.get("0", CreateLocalChangeHandlers);
-setTimeout(HandleHeartbeat, 1000 * 120);
diff --git a/apps/clients/chrome/src/trunk/foxmarks-password.js b/apps/clients/chrome/src/trunk/foxmarks-password.js
deleted file mode 100644
index 3aab91b37e..0000000000
--- a/apps/clients/chrome/src/trunk/foxmarks-password.js
+++ /dev/null
@@ -1,734 +0,0 @@
-/*
- * Copyright 2007-2010 Xmarks Inc.
- *
- * foxmarks-password.js: component that implements the details of password sync.
- */
-
-/*
- * On first instantiation ensure that static elements are initialized.
- */
-function PasswordDatasource() {
-    if (!PasswordDatasource.encryptor) {
-        PasswordDatasource.encryptor = CreateAESManager();
-    }
-
-    if (!PasswordDatasource.passwordCache) {
-        PasswordDatasource.passwordCache = {};
-    }
-    
-    if (!PasswordDatasource.exceptionCache) {
-        var savedExceptionList = localStorage.getItem("pwstoreExceptions");
-        if (savedExceptionList) {
-            PasswordDatasource.exceptionCache = JSON.parse(savedExceptionList);
-        } else {
-            PasswordDatasource.exceptionCache = {};
-        }
-    }
-
-    if (!PasswordDatasource.passwordDb) {
-        this.LoadPasswordDb();
-    }
-
-    this.orderIsImportant = false;
-}
-
-PasswordDatasource.prototype = {
-    /*
-     * Initialize a database connection (PasswordDatasource.passwordDb) and attempt to create a
-     * password storage database.  If the database already exists (the create will fail), read
-     * the current password storage and populate PasswordDatasource.passwordCache.
-     */
-    LoadPasswordDb: function() {
-        if (!Xmarks.Settings.Get("current-username")) {
-            Xmarks.LogWrite("Not signed in, no password data to load");
-            return;
-        }
-
-        PasswordDatasource.passwordCache = {};
-
-        var self = this;
-        if (!PasswordDatasource.passwordDb) {
-            PasswordDatasource.passwordDb = openDatabase("pwstore", "", "Password files", 128 * 300);
-        }
-
-        if (!PasswordDatasource.passwordDb) {
-            Xmarks.LogWrite("ERROR: Unable to open password db!");
-            return;
-        }
-
-        var tableName = Xmarks.Settings.GetUserHash();
-        PasswordDatasource.passwordDb.transaction(CreateDb, SqlFail, SqlSuccess);
-
-        // Attempt to create password store database
-        function CreateDb(tx) {
-            tx.executeSql("CREATE TABLE '" + tableName + "' (rowId INTEGER PRIMARY KEY AUTOINCREMENT, domainKey TEXT, data TEXT);", []);
-        }
-
-        // Creating password store failed, database probably already exists!  Read current data out of it
-        function SqlFail(error) {
-            Xmarks.LogWrite("Failed to create new password db, it probably exists.  Attempting to load password data.  Error: " + error.message);
-            PasswordDatasource.passwordDb.transaction(LoadDb, LoadFail, LoadSuccess);
-
-            function LoadDb(tx) {
-                tx.executeSql("SELECT * FROM '" + tableName + "';", [], HandleData);
-
-                function HandleData(tx, results) {
-                    if (results && results.rows) {
-                        for (var i = 0; i < results.rows.length; i++) {
-                            var newDomainKey = unescape(results.rows.item(i).domainKey);
-                            var newNodeString = unescape(results.rows.item(i).data);
-                            var newNode = new_node_from_source(newNodeString);
-                            newNode.dbkey = results.rows.item(i).rowId;
-                            self.AddNodeToCache(newDomainKey, newNode);
-                        }
-                    }
-                }
-            }
-
-            // Failed to load into cache
-            function LoadFail(error) {
-                Xmarks.LogWrite("Unable to load from password store [" + tableName + "]: " + error.message);
-            }
-
-            // Password data loaded into cache
-            function LoadSuccess() {
-                Xmarks.LogWrite("Finished loading from password store [" + tableName + "]");
-            }
-        }
-
-        // Password store created
-        function SqlSuccess() {
-            Xmarks.LogWrite("Password db successfully created, no need to read from it");
-        }
-    },
-
-    /*
-     * Given an URL, return a list of password data that are valid for that URL.
-     */
-    CheckForMatch: function(url) {
-        // Use protocol + domain as key
-        var domainKey = Xmarks.ExtractProtocolAndDomain(url);
-        if (!domainKey) {
-            return [];
-        }
-
-        var domainMatches = PasswordDatasource.passwordCache[domainKey];
-        if (!domainMatches) {
-            return [];
-        }
-
-        // Loop through domain matches, return any results that match the URL
-        var passwordMatches = [];
-        for (var i = 0; i < domainMatches.length; i++) {
-            var aNode = domainMatches[i];
-            if (!aNode['private']) {
-                try {
-                    this.decode(aNode);
-                } catch (ex) {
-                    Xmarks.LogWrite("Exception while decrypting domain match [" + domainKey + "] for nid [" + aNode.nid + "]");
-                    continue;
-                }
-            }
-
-            if (url.indexOf(aNode['private'].hostname) == 0) {
-                passwordMatches.push(aNode['private']);
-            }
-        }
-
-        return passwordMatches;
-    },
-
-    /*
-     * Clear all password data
-     */
-    ClearLocalStore: function(callback) {
-        PasswordDatasource.passwordCache = {};
-        if (!PasswordDatasource.passwordDb) {
-            Xmarks.LogWrite("ERROR: Unable to open password db!");
-            callback(-1);
-        }
-
-        // Attempt to clear database
-        var tableName = Xmarks.Settings.GetUserHash();
-        PasswordDatasource.passwordDb.transaction(ClearDb, SqlFail, SqlSuccess);
-
-        function ClearDb(tx) {
-            tx.executeSql("DELETE FROM '" + tableName + "';", []);
-        }
-
-        function SqlFail(error) {
-            Xmarks.LogWrite("Unable to clear password store [" + tableName + "]: " + error.message);
-            callback(-1);
-        }
-
-        function SqlSuccess() {
-            Xmarks.LogWrite("Password store [" + tableName + "] cleared.");
-            callback(0);
-        }
-    },
-
-    /*
-     * Add all entries in ns to our cache.  If the value has changed (or doesn't currently exist),
-     * add it to the password store too.  Remove any current entries in the password store that
-     * aren't in ns.
-     */
-    AcceptNodes: function(ns, callback) {
-        Xmarks.LogWrite("Adding new nodes to password store");
-        var root = ns.Node(NODE_ROOT);
-        if (root.children) {
-            for (var i = 0; i < root.children.length; i++) {
-                var aNode = ns.Node(root.children[i]);
-                try {
-                    if (aNode.ntype == "password") {
-                        this.AddNode(aNode);
-                    } else {
-                        Xmarks.LogWrite("Skipping unknown node type: " + JSON.stringify(aNode));
-                    }
-                } catch (ex) {
-                    Xmarks.LogWrite("Exception [" + JSON.stringify(ex) + "] while adding password node: " + JSON.stringify(aNode));
-                }
-            }
-        }
-
-        // Remove anything that isn't in ns
-        Xmarks.LogWrite("Removing unused nids from password store");
-        var removeList = [];
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][i];            
-                if (!ns.Node(aNode.nid, false, true)) {
-                    removeList.push(aNode.nid);
-                }
-            }
-        }
-
-        for (var i = 0; i < removeList.length; i++) {
-            this.RemoveNode(removeList[i]);
-        }
-
-        callback(0);
-    },
-
-    /*
-     * Add aNode to the passwordCache and push it to the database as well
-     */
-    AddNode: function(node) {
-        if (!node['private']) {
-            this.decode(node);
-        }
-
-        var domainKey = Xmarks.ExtractProtocolAndDomain(node['private'].hostname);
-        var status = this.AddNodeToCache(domainKey, node);
-
-        // This is a new or modified entry, update the store
-        if (status) {
-            if (!PasswordDatasource.passwordDb) {
-                Xmarks.LogWrite("ERROR: Unable to open password db!");
-                return;
-            }
-            
-            // Attempt to update or add to database
-            var tableName = Xmarks.Settings.GetUserHash();
-            var jsonItem = node.toSource(); // Omits the private entry
-            var query = "INSERT INTO '" + tableName + "' ('domainKey', 'data') VALUES ('" + escape(domainKey) + "', '" + escape(jsonItem) + "');";
-            if (status == "update" && node.dbkey) {
-                query = "UPDATE '" + tableName + "' SET 'data'='" + escape(jsonItem) + "' WHERE 'rowId'='" + node.dbkey + "';";
-            }
-
-            PasswordDatasource.passwordDb.transaction(UpdateDb, SqlFail, SqlSuccess);
-            function UpdateDb(tx) {
-                tx.executeSql(query, []);
-            }
-            
-            function SqlFail(error) {
-                Xmarks.LogWrite("Error updating password store [" + tableName + "]: " + error.message);
-            }
-            
-            function SqlSuccess() {
-                //Xmarks.LogWrite("Password store [" + tableName + "] updated");
-            }
-        }
-    },
-
-    /*
-     * Adds node to PasswordDatasource.passwordCache under the domainKey index.  If the node already
-     * exists, checks to see if the data should be updated.  Returns "add" if a new entry was added
-     * to the cache, "update" if an existing item was changed, or null if the item is already present.
-     */
-    AddNodeToCache: function(domainKey, node) {
-        if (!PasswordDatasource.passwordCache[domainKey]) {
-            Xmarks.LogWrite("Creating new domainKey for password item: " + domainKey);
-            PasswordDatasource.passwordCache[domainKey] = [node];
-            return "add";
-        } else {
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                if (PasswordDatasource.passwordCache[domainKey][i].nid == node.nid) {
-                    if (PasswordDatasource.passwordCache[domainKey][i].data == node.data) {
-                        // Already in cache
-                        return null;
-                    } else {
-                        Xmarks.LogWrite("Updating item [" + node.nid + "] in: " + domainKey);
-                        PasswordDatasource.passwordCache[domainKey][i] = node;
-                        return "update";
-                    }
-                }
-            }
-            
-            // New item
-            Xmarks.LogWrite("Adding new password item to: " + domainKey);
-            PasswordDatasource.passwordCache[domainKey].push(node);
-            return "add";
-        }
-    },
-
-    /*
-     * Deletes nid from local storage and our database
-     */
-    RemoveNode: function(nid) {
-        Xmarks.LogWrite("Removing password node: " + nid);
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][i];            
-                if (aNode.nid == nid) {
-                    Xmarks.LogWrite("Found nid [" + nid + "], removing from password store");
-                    PasswordDatasource.passwordCache[domainKey].splice(i, 1);
-
-                    if (aNode.dbkey) {
-                        var tableName = Xmarks.Settings.GetUserHash();
-                        PasswordDatasource.passwordDb.transaction(UpdateDb, SqlFail, SqlSuccess);
-                        function UpdateDb(tx) {
-                            var query = "DELETE FROM '" + tableName + "' WHERE rowId=" + aNode.dbkey + ";";
-                            Xmarks.LogWrite("Removing nid from db: " + query);
-                            tx.executeSql(query, []);
-                        }
-                        
-                        function SqlFail(error) {
-                            Xmarks.LogWrite("Error remove nid from password store [" + tableName + "]: " + error.message);
-                        }
-                        
-                        function SqlSuccess() {
-                            Xmarks.LogWrite("nid removed from password store [" + tableName + "]");
-                        }
-                    }
-
-                    return true;
-                }
-            }
-        }
-
-        Xmarks.LogWrite("nid not found, skipping");
-        return false;
-    },
-
-    /*
-     * Merge two node sets
-     */    
-    Merge: function(dest, source, callback) {
-        var snode = source.Node(NODE_ROOT, false, true); 
-        if (snode == null) {
-            if (callback) {
-                callback(0);
-            }
-            return;
-        }
-
-        var dnode = dest.Node(NODE_ROOT, false, true);
-        if (dnode == null) {
-            var now = new Date();
-            var randomStuff = {password: hex_md5(now.getTime().toString())};
-            dest.Do_insert(NODE_ROOT, {ntype: "folder", children: [], data: this.encrypt(JSON.stringify(randomStuff))});
-            dnode = dest.Node(NODE_ROOT, false, true);
-        }
-
-        if (!dnode.data) {
-            var now = new Date();
-            var randomStuff = {password: hex_md5(now.getTime().toString())};
-            var ditem = dest.Node(NODE_ROOT, true);
-            delete ditem['private'];
-            ditem.data = this.encrypt(JSON.stringify(randomStuff));
-        }
-
-        // If we can't decode snode or dnode, we might be merging with two different PINs.  Assume the current
-        // PIN can do at least one of them and ask for another one.  Whichever one decodes source will
-        // be saved after the merge
-        var self = this;
-        self._oldpin = Xmarks.Settings.Get(Xmarks.Settings.GetUserHash() + "password-pin", "");
-        if (!self.VerifyPinData(self._oldpin, dnode.data)) {
-            Xmarks.LogWrite("Can't decode dnode with current PIN, asking for a second");
-            Xmarks.VerifyUserPin(ConfirmNewPin, function(aPin) { return self.VerifyPinData(aPin, dnode.data); });
-        } else if (!self.VerifyPinData(self._oldpin, snode.data)) {
-            Xmarks.LogWrite("Can't decode snode with current PIN, asking for a second");
-            Xmarks.VerifyUserPin(ConfirmNewPin, function(aPin) { return self.VerifyPinData(aPin, snode.data); });
-        } else {
-            DoMerge();
-        }
-
-        function ConfirmNewPin(pinData) {
-            if (!pinData.encodedPin) {
-                Xmarks.LogWrite("User canceled pin, canceling merge");
-                callback(-1);
-            }
-
-            Xmarks.Settings.Set(Xmarks.Settings.GetUserHash() + "password-pin", pinData.encodedPin, pinData.persist);
-            DoMerge();
-        }
-        
-        function DoMerge() {
-            var dlist = dnode.children || [];
-            var slist = snode.children || [];
-            var ctr = slist.length;
-
-            while (ctr--) {
-                var nid = slist[ctr];
-                var sitem = source.Node(nid);
-                var ditem = dest.Node(nid, false, true);
-                if (!ditem) {
-                    dest.Do_insert(nid, self.GetSafeInsertAttrs(sitem));
-                } else {
-                    var sdata = self.decode(sitem);
-                    var ddata = self.decode(ditem);
-                    if (sdata.password != ddata.password) {
-                        ditem = dest.Node(nid, true);
-                        delete ditem['private'];
-                        ditem.data = sitem.data;
-                    }
-                }
-            }
-
-            delete self._oldpin;
-            if (callback) {
-                callback(0);
-            }
-        }
-    },
-
-    GetSafeInsertAttrs: function(node) {
-        // Return args for an insert command that creates the given node.
-        this.encode(node);
-        return node.GetSafeAttrs();
-    },
-
-    /*
-     * Ensures that node.data has been decrypted and stored in node['private'].
-     */
-    decode: function(node) {
-        if (!node['private']) {
-            var decryptedData = this.decrypt(node.data);
-            // Hack, Firefox's JSON encoder sometimes ends objects with an extra comma, for example {"key":"value",}
-            // Chrome's JSON parser barfs on this, so we manually remove any trailing commas before parsing
-            if (decryptedData.substr(decryptedData.length - 2) == ",}") {
-                decryptedData = decryptedData.substring(0, decryptedData.length - 2) + "}";
-            }
-            node['private'] = JSON.parse(decryptedData);
-        }
-
-        return node['private'];
-    },
-
-    /*
-     * Decrypts str, using the saved password-pin.  Returns the decrypted string.  If decryption
-     * fails, log error and throw an exception.
-     */
-    decrypt: function(str) {
-        if (!str) {
-            Xmarks.LogWrite("Cannot decrypt empty string");
-            throw 3;
-        }
-
-        var result = PasswordDatasource.encryptor.decrypt(Base64.decode(Xmarks.Settings.Get(Xmarks.Settings.GetUserHash() + "password-pin", "")), str);
-        var goodPIN = result.indexOf('password') >=  0;
-
-        // If we're doing a merge from a reset pin, there will be
-        // two pins floating around
-        if (!goodPIN && this._oldpin !== undefined) {
-            result = PasswordDatasource.encryptor.decrypt(Base64.decode(this._oldpin), str);
-            goodPIN = result.indexOf('password') >=  0;
-        }
-
-        if (!goodPIN) {
-            // Decrypt failed
-            Xmarks.LogWrite("Unable to decrypt data, invalid PIN?");
-            throw 3;
-        }
-
-        return result;
-    },
-
-    /*
-     * Encrypts str, using the saved password-pin.  Returns the encrypted string.
-     */
-    encrypt: function(str) {
-        var result = PasswordDatasource.encryptor.encrypt(Base64.decode(Xmarks.Settings.Get(Xmarks.Settings.GetUserHash() + "password-pin", "")), str);
-        return result;
-    },
-
-    /*
-     * Ensures that node['private'] has been encrypted and stored in node.data.
-     */
-    encode: function(node) {
-        if (!node.data) {
-            node.data = this.encrypt(JSON.stringify(node['private']));
-        }
-        return node.data;
-    },
-
-    /*
-     * Create a nid based off login's data.
-     */
-    GenerateNid: function(login) {
-        return hex_md5("password|".concat(
-            login.hostname, "|",
-            login.formSubmitURL, "|",
-            login.httpRealm, "|",
-            login.usernameField, "|",
-            login.passwordField, "|",
-            login.username));
-    },
-
-    /*
-     * Checks to see if pin correctly decrypts nodeData.
-     */
-    VerifyPinData: function(pin, nodeData) {
-        Xmarks.LogWrite("Verifying PIN (Testing Node)");
-        Xmarks.LogWrite("Node Stats: " + (nodeData ? nodeData.length : "null"));
-        var result = PasswordDatasource.encryptor.decrypt(pin, nodeData);
-        Xmarks.LogWrite("Node Verification: " + (result.indexOf('password') >= 0 ? "true" : "false"));
-        return result.indexOf('password') >= 0;
-    },
-
-    /*
-     * Checks to see if a pin correctly decrypts any local node
-     */
-    DoesPinUnlockLocalData: function(pin) {
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            if (PasswordDatasource.passwordCache[domainKey].length > 0) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][0];
-                return this.VerifyPinData(pin, aNode.data);
-            }
-        }
-
-        return false;
-    },
-
-    /*
-     * Provides all password data as Xmarks nodes.
-     */
-    ProvideNodes: function(Caller, AddNode, Complete) {
-        var childList = [];
-        for (var aDomain in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(aDomain)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[aDomain].length; i++) {
-                childList.push(PasswordDatasource.passwordCache[aDomain][i].nid);
-                AddNode.apply(Caller, [PasswordDatasource.passwordCache[aDomain][i]]);
-            }
-        }
-
-        // Create a ROOT.  Note we do this after creating the children!  We can only get away
-        // with this because AddNode doesn't do this type of sanity checking...
-        var now = new Date();
-        var randomStuff = {password: hex_md5(now.getTime().toString())};
-        var rootNode = new Node(NODE_ROOT, {ntype: "folder", children: childList, 'private': randomStuff, data: this.encrypt(JSON.stringify(randomStuff))});
-        AddNode.apply(Caller, [rootNode]);
-
-        Complete.call(Caller, 0);
-    },
-
-    compareNodes: function(snode, onode, attrs) {
-        // root nodes are always equal
-        if (snode.nid == NODE_ROOT) {
-            return false;
-        }
-
-        var sdata = this.decode(snode);
-        var ddata = this.decode(onode);
-
-        if (sdata.password == ddata.password) {
-            return false;
-        }
-
-        attrs["data"] = this.encode(onode);
-        return true;
-    },
-
-    /*
-     * Forcibly encodes all nodes, updating encoded data in database as well
-     */
-    EncodeAll: function() {
-        Xmarks.LogWrite("Encoding all passwords nodes");
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][i];            
-                try {
-                    this.encode(aNode);
-
-                    // Attempt to update database
-                    if (!PasswordDatasource.passwordDb) {
-                        Xmarks.LogWrite("ERROR: Unable to open password db!");
-                        continue;
-                    }
-
-                    if (!node.dbkey) {
-                        Xmarks.LogWrite("ERROR: No dbkey for nid! " + aNode.nid);
-                        continue;
-                    }
-
-                    var tableName = Xmarks.Settings.GetUserHash();
-                    var jsonItem = node.toSource(); // Omits the private entry
-                    var query = "UPDATE '" + tableName + "' SET 'data'='" + escape(jsonItem) + "' WHERE 'rowId'='" + node.dbkey + "';";
-
-                    PasswordDatasource.passwordDb.transaction(UpdateDb, SqlFail, SqlSuccess);
-                    function UpdateDb(tx) {
-                        tx.executeSql(query, []);
-                    }
-
-                    function SqlFail(error) {
-                        Xmarks.LogWrite("Error updating password store [" + tableName + "]: " + error.message);
-                    }
-
-                    function SqlSuccess() {
-                        //Xmarks.LogWrite("Password store [" + tableName + "] updated");
-                    }
-                } catch (ex) {
-                    Xmarks.LogWrite("Unable to encode nid [" + aNode.nid + "]: " + JSON.stringify(ex));
-                }
-            }
-        }
-    },
-
-    /*
-     * Forcibly decodes all nodes
-     */
-    DecodeAll: function() {
-        Xmarks.LogWrite("Decoding all passwords nodes");
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][i];            
-                try {
-                    this.decode(aNode);
-                } catch (ex) {
-                    Xmarks.LogWrite("Unable to decode nid [" + aNode.nid + "]: " + JSON.stringify(ex));
-                }
-            }
-        }
-    },
-
-    /*
-     * Returns a list of {hostname, username, password, nid}
-     */
-    GetPasswordList: function() {
-        var passwordList = [];
-
-        for (var domainKey in PasswordDatasource.passwordCache) {
-            if (!PasswordDatasource.passwordCache.hasOwnProperty(domainKey)) {
-                continue;
-            }
-
-            for (var i = 0; i < PasswordDatasource.passwordCache[domainKey].length; i++) {
-                var aNode = PasswordDatasource.passwordCache[domainKey][i];            
-                if (!aNode['private']) {
-                    try {
-                        this.decode(aNode);
-                    } catch (ex) {
-                        Xmarks.LogWrite("Exception while decrypting domain match [" + domainKey + "] for nid [" + aNode.nid + "]");
-                        continue;
-                    }
-                }
-                
-                passwordList.push({nid: aNode.nid, hostname: aNode['private'].hostname, username: aNode['private'].username, password: aNode['private'].password});
-            }
-        }
-
-        passwordList.sort(function(a, b) {
-            if (a.hostname.toLowerCase() < b.hostname.toLowerCase()) return -1;
-            if (a.hostname.toLowerCase() > b.hostname.toLowerCase()) return 1;
-            return 0;
-        });
-        return passwordList;
-    },
-
-    /*
-     * Add a domain to to the list of domains that we don't ask the user about
-     */
-    AddException: function(newException) {
-        var newDomain = Xmarks.ExtractProtocolAndDomain(newException);
-        if (PasswordDatasource.exceptionCache[newDomain]) {
-            Xmarks.LogWrite("Exception already exists for domain [" + newDomain + "], ignoring.");
-            return;
-        }
-
-        Xmarks.LogWrite("Adding password domain exception [" + newDomain + "]");
-        PasswordDatasource.exceptionCache[newDomain] = true;
-        localStorage.setItem("pwstoreExceptions", JSON.stringify(PasswordDatasource.exceptionCache));
-    },
-
-    /*
-     * Remove a domain to to the list of domains that we don't ask the user about
-     */
-    RemoveException: function(oldException) {
-        var oldDomain = Xmarks.ExtractProtocolAndDomain(oldException);
-        if (!PasswordDatasource.exceptionCache[oldDomain]) {
-            Xmarks.LogWrite("Exception to remove doesn't exist [" + oldDomain + "], ignoring.");
-            return false;
-        }
-
-        Xmarks.LogWrite("Removing password domain exception [" + oldDomain + "]");
-        delete(PasswordDatasource.exceptionCache[oldDomain]);
-        localStorage.setItem("pwstoreExceptions", JSON.stringify(PasswordDatasource.exceptionCache));
-        return true;
-    },
-
-    /*
-     * Remove all exceptions
-     */
-    DeleteLocalExceptions: function() {
-        Xmarks.LogWrite("Removing all password domain exceptions");
-        PasswordDatasource.exceptionCache = {};
-        localStorage.setItem("pwstoreExceptions", JSON.stringify(PasswordDatasource.exceptionCache));
-    },
-
-    /*
-     * Returns true if the user has an exception for the given URL
-     */
-    IsInExceptionList: function(aUrl) {
-        var aDomain = Xmarks.ExtractProtocolAndDomain(aUrl);
-        return PasswordDatasource.exceptionCache[aDomain];
-    },
-
-    /*
-     * Returns the current list of excpetion domains
-     */
-    GetExceptionList: function() {
-        return PasswordDatasource.exceptionCache;
-    },
-    
-    /*
-     * Very simple nid conflict, just take one (same as xmarks-chromemarks.js
-     * TODO: prompt user for changes!
-     */
-    handleNidConflict: function(lnode, snode, conflicts) {
-        return "local";
-    }
-};
diff --git a/apps/clients/chrome/src/trunk/passwordinsert.js b/apps/clients/chrome/src/trunk/passwordinsert.js
deleted file mode 100644
index 3a3e26440c..0000000000
--- a/apps/clients/chrome/src/trunk/passwordinsert.js
+++ /dev/null
@@ -1,371 +0,0 @@
-if (typeof(chrome.runtime) != 'undefined') {
-  chrome.runtime.onMessage.addListener(LoadPasswordHandler);
-} else {
-  chrome.extension.onRequest.addListener(LoadPasswordHandler);
-}
-ListenForPasswordChanges();
-
-function LoadPasswordHandler(request, sender, sendResponse) {
-    if (request.message == "passwords") {
-        InsertPasswordData(request.data.matches, request.data.showUi);
-    } else if (request.message == "promptSave") {
-        PromptSavePassword(request.data);
-    }
-}
-
-/*
- * Look for a form with matching username and password field names.  If found, insert matching username/password data.
- */
-function InsertPasswordData(matchingPasswordList, showUi) {
-    if (!matchingPasswordList || !matchingPasswordList.length) {
-        return;
-    }
-
-    // We have an URL, see if we can find a matching form
-    for (var formIndex = 0; formIndex < document.forms.length; formIndex++) {
-        var aForm = document.forms[formIndex];
-        
-        // Find first password field, that'll be the one we use
-        var passwordField = FindPasswordField(aForm);
-        if (!passwordField.element) {
-            // Nothing going on in this form
-            continue;
-        }
-
-        // We have a password element, find a username element for it
-        var usernameField = FindUsernameField(aForm, passwordField.index);
-
-        // No username element is okay, we'll try to just match the password
-        XmarksLog('Found password form.  Password field name [' + passwordField.element.name + '], Username field name [' + (usernameField.element ? usernameField.element.name : 'empty') + ']');
-
-        // We've got a potential username/password form, score our list of password matches from highest (best) to lowest (worst)
-        for (var passwordIndex = 0; passwordIndex < matchingPasswordList.length; passwordIndex++) {
-            var aPasswordData = matchingPasswordList[passwordIndex];
-            var passwordScore = 0;
-            if (passwordField.element.name == aPasswordData.passwordField) {
-                passwordScore += 2;
-            }
-            
-            if (usernameField.element && usernameField.element.name == aPasswordData.usernameField) {
-                passwordScore += 1;
-            } else if (!usernameField.element && aPasswordData.usernameField == "") {
-                passwordScore += 1;
-            }
-
-            XmarksLog('Scoring saved password [' + passwordScore + '].  Password field name [' + aPasswordData.passwordField + '], username field name [' + aPasswordData.usernameField + ']');
-            aPasswordData['score'] = passwordScore;
-        }
-
-        // Sort potential matches from highest to lowest
-        matchingPasswordList.sort(function(a, b) { return b.score - a.score; });
-
-        // If matches are found color background to show we're active.  If there is just one match, add it now.
-        // If there is more than one, add a listener that will auto-add the password once they choose a username.
-        if (matchingPasswordList.length > 0) {
-            if (showUi) {
-                passwordField.element.style.background = "-webkit-gradient(linear, left top, right top, from(#ffffff), to(rgb(60, 170, 220))) !important";
-                if (usernameField.element) {
-                    usernameField.element.style.background = "-webkit-gradient(linear, left top, right top, from(#ffffff), to(rgb(60, 170, 220))) !important";
-                }
-            }
-
-            if (matchingPasswordList.length == 1 || matchingPasswordList[0].score > matchingPasswordList[1].score) {
-                XmarksLog('Inserting single password');
-                passwordField.element.value = matchingPasswordList[0].password;
-                if (usernameField.element) {
-                    usernameField.element.value = matchingPasswordList[0].username;
-                }
-            }
-
-            if (usernameField.element) {
-                XmarksLog('Inserting username change handler');
-                usernameField.element.addEventListener('keyup', BuildKeyUpCallback(matchingPasswordList, usernameField.element), false);
-                usernameField.element.addEventListener('blur', BuildCallback(matchingPasswordList, passwordField.element), false);
-
-                function BuildKeyUpCallback(matches, usEl) {
-                    return function(ev) {
-                        if (ev.keyCode < 48) {
-                            return;
-                        }
-
-                        var input = usEl.value;
-                        if (input.length < 1) {
-                            return;
-                        }
-
-                        for (var i = 0; i < matches.length; i++) {
-                            if (matches[i].username.indexOf(input) == 0 && matches[i].username > input) {
-                                // match found
-                                usEl.value = matches[i].username;
-                                usEl.setSelectionRange(input.length, matches[i].username.length);
-                                break;
-                            }
-                        }
-                    };
-                }
-
-                function BuildCallback(matches, pwEl) {
-                    return function() {
-                        XmarksLog('Attempting to autofill password for username: ' + this.value);
-                        for (var i = 0; i < matches.length; i++) {
-                            if (matches[i].username == this.value) {
-                                XmarksLog('Match found, updating password field');
-                                pwEl.value = matches[i].password;
-                                break;
-                            } else {
-                                XmarksLog('Not a match, skipping [' + matches[i].username + ']');
-                            }
-                        }
-                    };
-                }
-            }
-        }
-    }
-}
-
-/*
- * Look for any forms with text and password input fields.  Add events that will send username/password data to
- * extension if the form is submitted.
- */
-function ListenForPasswordChanges() {
-    for (var i = 0; i < document.forms.length; i++) {
-        var aForm = document.forms[i];
-        var passwordField = FindPasswordField(aForm);
-        if (!passwordField.element) {
-            continue;
-        }
-        var usernameField = FindUsernameField(aForm, passwordField.index);
-
-        // Valid-ish form found, add listener to submit
-        XmarksLog("Adding form and input listeners");
-        passwordField.element.addEventListener("keypress", InputFieldChangeHandler, false);
-        if (usernameField.element) {
-            usernameField.element.addEventListener("keypress", InputFieldChangeHandler, false);
-        }
-        aForm.addEventListener("submit", SubmitHandler, false);
-
-        function InputFieldChangeHandler(e) {
-            var targetType;
-            if (e.target.getAttribute("type") == "password") {
-                targetType = "lastValidXmarksPass";
-            } else if (e.target.getAttribute("type") == "text") {
-                targetType = "lastValidXmarksUser";
-            } else {
-                // This shouldn't happen
-                XmarksLog("InputFidleChangeHandler on invalid type: " + e.target.getAttribute("type"));
-                return;
-            }
-
-            // Some sites empty the password value on submit, we maintain the last valid value
-            if (!e.target.value) {
-                XmarksLog("Field being emptied, not overwriting previous value");
-                return;
-            }
-
-            var data = {value: e.target.value, field: e.target.name};
-            e.target.form.setAttribute(targetType, JSON.stringify(data));
-        }
-
-        function SubmitHandler(e) {
-            var submitForm = e.target;
-
-            // Attemp to find password data
-            var savedPass = null;
-            var newPasswordField = FindPasswordField(submitForm);
-            if (!newPasswordField.element || !newPasswordField.element.value) {
-                // Can't find a password element or it is empty, do we have a saved value available?
-                XmarksLog("Couldn't find password data, attempting to pull saved value");
-                var passAttr = submitForm.getAttribute("lastValidXmarksPass");
-                savedPass = passAttr ? JSON.parse(passAttr) : null;
-                
-                if (!savedPass) {
-                    XmarksLog("Can't find password element, nothing to handle on submit");
-                    return;
-                }
-            } else {
-                savedPass = {value: newPasswordField.element.value, field: newPasswordField.element.name};
-            }
-
-            var promptData = {'passwordField': savedPass.field, 'password': savedPass.value,
-                              'url': document.location.href, 'formAction': submitForm.action, 'usernameField': '', 'username': ''};
-
-            // Attempt to find username data
-            var savedUser = null;
-            if (newPasswordField) {
-                var newUserField = FindUsernameField(submitForm, newPasswordField.index);
-                if (newUserField.element && newUserField.element.value) {
-                    savedUser = {value: newUserField.element.value, field: newUserField.element.name};
-                }
-            }
-            
-            if (!savedUser) {
-                XmarksLog("Couldn't find username data, attempting to pull saved value");
-                var userAttr = submitForm.getAttribute("lastValidXmarksUser");
-                var savedUser = userAttr ? JSON.parse(userAttr) : null;
-            }
-
-            if (savedUser) {
-                promptData['usernameField'] = savedUser.field;
-                promptData['username'] = savedUser.value;
-            }
-
-            XmarksLog("Sending prompt data to extension");
-            if (typeof(chrome.runtime) != 'undefined') {
-              chrome.runtime.sendMessage({'requestType': 'promptSavePassword', 'promptData': promptData});
-            } else {
-              chrome.extension.sendRequest({'requestType': 'promptSavePassword', 'promptData': promptData});
-            }
-        }
-    }
-}
-
-/*
- * The user entered a new password on the previos page, ask them if they want to save it.
- */
-function PromptSavePassword(promptData) {
-    var xmarksPromptElement = document.getElementById("XmarksPasswordPrompt");
-    if (xmarksPromptElement) {
-        XmarksLog("XmarksPasswordPrompt already exists, not adding prompt");
-        return;
-    }
-
-    var message = "save";
-    if (promptData.type == "update") {
-        message = "update";
-    }
-
-    // Continer div
-    var promptDialog = document.createElement("div");
-    promptDialog.id = "XmarksPasswordPrompt";
-    promptDialog.style.left = "0";
-    promptDialog.style.top = "0";
-    promptDialog.style.width = "100%";
-    promptDialog.style.zIndex = "10000";
-    promptDialog.style.position = "fixed";
-    promptDialog.style.backgroundColor = "rgb(60, 170, 220)";
-    promptDialog.style.borderBottom = "1px solid black";
-    promptDialog.style.padding = "5px";
-    promptDialog.style.fontSize = "10pt";
-    promptDialog.style.fontFamily = "verdana, sans-serif";
-    promptDialog.style.color = "black";
-    promptDialog.style["-webkit-box-shadow"] = "0 3px 3px #666";
-
-    // Message text
-    var messageText = document.createElement("div");
-    messageText.style.paddingLeft = "5px";
-    promptDialog.style.fontSize = "12pt";
-    promptDialog.style.textAlign = "left";
-    promptDialog.style.fontFamily = "Trebuchet MS, Helvetica, sans-serif";
-    messageText.innerHTML = "Would you like Xmarks to " + message + " your password?";
-
-    // Button container
-    var buttonContainer = document.createElement("div");
-    buttonContainer.style['float'] = "right";
-    buttonContainer.style.width = "360px";
-    buttonContainer.style.paddingRight = "10px";
-    buttonContainer.style.textAlign = "right";
-
-    // Buttons
-    var saveButton = CreateCssButton();
-    saveButton.setAttribute("value", "Save password");
-    saveButton.addEventListener("click", function() {
-        XmarksLog("Saving password data!");
-        if (typeof(chrome.runtime) != 'undefined') {
-          chrome.runtime.sendMessage({'requestType': 'savePassword', 'promptData': promptData});
-        } else {
-          chrome.extension.sendRequest({'requestType': 'savePassword', 'promptData': promptData});
-        }
-        var xmarksPromptElement = document.getElementById("XmarksPasswordPrompt");
-        if (xmarksPromptElement) {
-            document.body.removeChild(xmarksPromptElement);
-        }
-    });
-
-    var ignoreButton = CreateCssButton();
-    ignoreButton.setAttribute("value", "Not now");
-    ignoreButton.addEventListener("click", function() {
-        XmarksLog("Removing XmarksPasswordPrompt element from DOM");
-        var xmarksPromptElement = document.getElementById("XmarksPasswordPrompt");
-        if (xmarksPromptElement) {
-            document.body.removeChild(xmarksPromptElement);
-        }
-    });
-
-    var neverButton = CreateCssButton();
-    neverButton.setAttribute("value", "Never for this site");
-    neverButton.addEventListener("click", function() {
-        XmarksLog("Adding exception");
-        if (typeof(chrome.runtime) != 'undefined') {
-          chrome.runtime.sendMessage({'requestType': 'exceptionPassword', 'promptData': promptData});
-        } else {
-          chrome.extension.sendRequest({'requestType': 'exceptionPassword', 'promptData': promptData});
-        }
-        var xmarksPromptElement = document.getElementById("XmarksPasswordPrompt");
-        if (xmarksPromptElement) {
-            document.body.removeChild(xmarksPromptElement);
-        }
-    });
-
-    // Build container HTML and add it to page
-    buttonContainer.appendChild(saveButton);
-    buttonContainer.appendChild(ignoreButton);
-    buttonContainer.appendChild(neverButton);
-
-    promptDialog.appendChild(buttonContainer);
-    promptDialog.appendChild(messageText);
-
-    document.body.appendChild(promptDialog);
-
-    function CreateCssButton() {
-        var aButton = document.createElement("input");
-        aButton.setAttribute("type", "button");
-        aButton.style.margin = "0 4px";
-        aButton.style.fontFamily = "Verdana, sans-serif";
-        aButton.style.padding = "3px 8px"; 
-        aButton.style.backgroundColor = "#f5f5f5";
-        aButton.style.border = "1px solid #dedede";
-        aButton.style.borderTop = "1px solid #eee";
-        aButton.style.borderLeft = "1px solid #eee";
-        aButton.style.borderRadius = "5px 5px";
-        aButton.style.fontSize = "12px";
-        aButton.style.lineHeight = "130%";
-        aButton.style.textDecoration = "none";
-        aButton.style.color = "black";
-        aButton.style.cursor = "pointer";
-        return aButton;
-    }
-}
-
-function XmarksLog(message) {
-    if (typeof(chrome.runtime) != 'undefined') {
-      chrome.runtime.sendMessage({'requestType': 'log', 'message': message});
-    } else {
-      chrome.extension.sendRequest({'requestType': 'log', 'message': message});
-    }
-}
-
-function FindPasswordField(aForm) {
-    if (aForm.elements && aForm.elements.length) {
-        for (passwordIndex = 0; passwordIndex < aForm.elements.length; passwordIndex++) {
-            var formElement = aForm.elements[passwordIndex];
-            if (formElement.type == "password" && !formElement.disabled) {
-                return {'element': formElement, 'index': passwordIndex};
-            }
-        }
-    }
-
-    return {'element': null, 'index': -1};
-}
-
-function FindUsernameField(aForm, passwordIndex) {
-    if (aForm.elements && aForm.elements.length) {
-        for (var usernameIndex = passwordIndex; usernameIndex > 0; usernameIndex--) {
-            var formElement = aForm.elements[usernameIndex - 1];
-            if (formElement.type == "text" && !formElement.disabled) {
-                return {'element': formElement, 'index': usernameIndex};
-            }
-        }
-    }
-
-    return {'element': null, 'index': -1};
-}
diff --git a/apps/clients/chrome/src/trunk/passwordmanager.html b/apps/clients/chrome/src/trunk/passwordmanager.html
deleted file mode 100644
index f779d4130d..0000000000
--- a/apps/clients/chrome/src/trunk/passwordmanager.html
+++ /dev/null
@@ -1,258 +0,0 @@
-<html>
-<head>
-<title>Xmarks Password Manager</title>
-
-<link type="text/css" href="jquery/css/south-street/jquery-ui-1.8.custom.css" rel="Stylesheet" />	
-<script type="text/javascript" src="jquery/js/jquery-1.4.2.min.js"></script>
-<script type="text/javascript" src="jquery/js/jquery-ui-1.8.custom.min.js"></script>
-
-<style>
-  td, table {
-      font-size: 10pt;
-      font-family: verdana, sans-serif;
-  }
-  
-  body {
-      background-color: rgb(143, 169, 192);
-      font-size: 10pt;
-      font-family: verdana, sans-serif;
-      margin: 0;
-      padding-top: 60px;
-      cursor: default;
-  }
-  
-  .display-box {
-      width: 450px;
-      margin-left: auto;
-      margin-right: auto;
-      border: 1px solid black;
-      background-color: white;
-      -webkit-box-shadow: 3px 3px 3px #666;
-      box-shadow: 3px 3px 3px #666;
-  }
-  
-  #upgrade-notice {
-      display: none;
-      margin-bottom: 2em;
-  }
-  
-  #manager-box {
-      background-color: #F0F0F0;
-  }
-
-  #manager-title {
-      background-color: rgb(80, 106, 154);
-      padding: 5px;
-      font-size: 10pt;
-      font-weight: bold;
-      color: white;
-      border-bottom: 1px solid black;
-      margin-bottom: 0.5em;
-  }
-
-  #all-categories {
-      border-bottom: 1px solid black;
-      padding-bottom: 2px;
-  }
-
-  .category {
-      padding: 2px 5px;
-      border: 1px solid black;
-      background-color: #D0D0D0;
-  }
-  
-  .category:hover {
-      background-color: white;
-  }
-
-  .category-selected {
-      padding: 2px 5px;
-      border: 1px solid black;
-      border-bottom: 1px solid white !important;
-      background-color: white !important;
-  }
-
-  #all-sections {
-      border-bottom: 1px solid black;
-      border-left: 1px solid black;
-      border-right: 1px solid black;
-      background-color: white;
-  }
-
-  .section {
-      padding: 10px;
-  }
-
-  .subsection {
-      -webkit-border-radius: 4px;
-      border: 1px solid #000;
-      padding: 10px;
-  }
-
-  .subsection-title {
-      font-size: 8pt;
-  }
-
-  #password-list-container {
-      border: 1px solid black;
-      max-height: 300px;
-      overflow: auto;
-  }
-
-  #exception-list-container {
-      border: 1px solid black;
-      max-height: 300px;
-      overflow: auto;
-  }
-
-  .pw-row {
-      cursor: default;
-  }
-
-  .pw-row:hover {
-      background-color: #DDEEFF;
-  }
-
-  .pw-row-selected {
-      background-color: #3399FF;
-  }
-
-  .pw-element {
-      padding: 4px;
-      white-space: nowrap;
-      overflow: hidden;
-	  text-overflow: ellipsis;
-  }
-
-  .pw-left {
-      width: 65%;
-  }
-  
-  .pw-right {
-      width: 35%;
-  }
-
-  .filter-default {
-      color: gray;
-      font-style: italic;
-  }
-</style>
-
-<script type="text/javascript" src="passwordmeter.js"></script>
-<script type="text/javascript" src="pin-management.js"></script>
-
-<script type="text/javascript" src="passwordmanager.js"></script>
-</head>
-
-<body>
-
-<div id="manager-box" class="display-box">
-<div id="manager-title">
-  Xmarks Password Manager
-</div>
-
-<div style="padding: 0 5px;">
-<div id="all-categories">
-  <span id="category-passwords" class="category">Saved Passwords</span>
-  <span id="category-exceptions" class="category">Exceptions</span>
-  <span id="category-settings" class="category">Settings</span>
-</div>
-
-<div id="all-sections">
-<div id="category-passwords-section" class="section">
-  <div id="password-manager-note">
-  </div>
-
-  <div id="password-manager-container">
-    <input id="filter-passwords" type="text" class="filter-default" style="width: 100%" value="Filter saved password list" />
-
-    <table style="width: 100%" cellspacing="0">
-      <tr style="font-weight: bold"><td class="pw-element pw-left">Website</td><td class="pw-element pw-right">Username</td></tr>
-    </table>
-
-    <div id="password-list-container" style="margin-bottom: 5px">
-      <table id="password-list" style="width: 100%; table-layout: fixed" cellspacing="0">
-      </table>
-    </div>
-    
-    <table style="width: 100%" cellspacing="0">
-      <tr><td>
-        <div id="real-username"></div>
-      </td><td style="text-align: right">
-        <span id="real-password" style="display: none"></span>
-        <input id="show-row" type="button" value="Show Password" disabled="disabled"/>
-      </td></tr>
-      <tr><td>
-        <div id="real-site"></div>
-      </td><td style="text-align: right">
-        <input id="remove-row" type="button" value="Remove" disabled="disabled" />
-      </td></tr>
-    </table>
-  </div>
-</div>
-
-<div id="category-exceptions-section" class="section">
-  <div id="exception-manager-note">
-  </div>
-
-  <div id="exception-manager-container">
-    <table style="width: 100%" cellspacing="0">
-      <tr style="font-weight: bold"><td class="pw-element">Website</td></tr>
-    </table>
-
-    <div id="exception-list-container" style="margin-bottom: 5px">
-      <table id="exception-list" style="width: 100%;" cellspacing="0">
-      </table>
-    </div>
-
-    <input id="remove-exception" type="button" value="Remove" disabled="disabled" />
-  </div>
-</div>
-
-<div id="category-settings-section" class="section">
-  <div class="subsection-title">Reset PIN</div>
-  <div class="subsection">
-    Resetting your PIN allows you to create a new PIN.  This new PIN can then be used to upload your
-    passwords from this computer to our servers.  However, this will <em>overwrite</em> any passwords you have saved on our servers.
-    <div style="text-align: center; margin-top: 0.5em">
-      <input id="button-reset-pin" type="button" value="Reset PIN" />
-    </div>
-  </div>
-  <br />
-  <div class="subsection-title">Delete Passwords From Server</div>
-  <div class="subsection">
-    Deleting passwords from server will completely remove your password information from our servers.  You will not be able to
-    undo this action.
-    <div style="text-align: center; margin-top: 0.5em">
-      <input id="button-remove-server" type="button" value="Delete passwords from server" />
-    </div>
-  </div>
-  <br />
-  <div class="subsection-title">Delete Passwords From Browser</div>
-  <div class="subsection">
-    Deleting passwords from browser will completely remove your password information from Xmarks in this browser.  To get your passwords back
-    you will need to reenable password synchronization.
-    <div style="text-align: center; margin-top: 0.5em">
-      <input id="xmdeletelocalpasswords" type="button" value="Delete passwords from browser" />
-    </div>
-  </div>
-  <br />
-  <div class="subsection-title">Password Sync UI</div>
-  <div class="subsection">
-    <input type="checkbox" id="checkbox-show-gradient" /> <label for="checkbox-show-gradient">Highlight text fields when auto-filling password data</label><br />
-  </div>
-</div>
-
-</div> <!-- all-sections -->
-
-<div style="margin: 0.5em 5px 0.5em 0; text-align: right">
-  <input id="message-close" type="button" value="Close" />
-</div>
-
-</div>
-
-<div id="modaldialog"></div>
-
-</div>
-</body>
-</html>
diff --git a/apps/clients/chrome/src/trunk/passwordmanager.js b/apps/clients/chrome/src/trunk/passwordmanager.js
deleted file mode 100644
index 5f5365bb40..0000000000
--- a/apps/clients/chrome/src/trunk/passwordmanager.js
+++ /dev/null
@@ -1,380 +0,0 @@
-var gPinVerified = false;
-function HandleLoad() {
-    $("#modaldialog").dialog({autoOpen: false, modal: true, title: "Xmarks"});
-    LoadCategory(document.getElementById("category-passwords"));
-}
-
-function LoadCategory(newCategory) {
-    // Unhighlight currently highlighted category and hide all prefs
-    var categoriesDiv = document.getElementById("all-categories");
-    for (var i = 0; i < categoriesDiv.children.length; i++) {
-        if (categoriesDiv.children[i].className == "category-selected") {
-            categoriesDiv.children[i].className = "category";
-        }
-    }
-
-    var sectionsDiv = document.getElementById("all-sections");
-    for (var i = 0; i < sectionsDiv.children.length; i++) {
-        sectionsDiv.children[i].style.display = "none";
-    }
-
-    // Highlight new category and show its prefs
-    newCategory.className = "category-selected";
-    var newSectionID = newCategory.id + "-section";
-    InitCategory(newSectionID);
-    document.body.setAttribute("current-ui-section", newSectionID)
-    var newSection = document.getElementById(newSectionID);
-    newSection.style.display = "block";
-}
-
-function InitCategory(sectionId) {
-    var bg = chrome.extension.getBackgroundPage();
-    if (sectionId == "category-passwords-section") {
-        var managerNote = "No passwords saved.";
-        if (gPinVerified) {
-            var pwList = bg.PasswordStore.GetPasswordList();
-            document.getElementById("password-list").innerHTML = "";
-            var filterText = null;
-            var filterBox = document.getElementById("filter-passwords");
-            if (filterBox.getAttribute("class") == "filter-enabled") {
-                filterText = filterBox.value.toLowerCase();
-            }
-
-            var selectedRow = null;
-            for (var i = 0; i < pwList.length; i++) {
-                var aTr = document.createElement("tr");
-                aTr.setAttribute("class", "pw-row");
-                aTr.setAttribute("xmarksNid", pwList[i].nid);
-                aTr.setAttribute("xmarksPass", pwList[i].password);
-                aTr.setAttribute("xmarksUser", pwList[i].username);
-                aTr.setAttribute("xmarksHost", pwList[i].hostname);
-                aTr.addEventListener("click", SelectRow);
-                
-                if (filterText && pwList[i].hostname.toLowerCase().indexOf(filterText) < 0 && pwList[i].username.toLowerCase().indexOf(filterText) < 0) {
-                    aTr.style.display = "none";
-                }
-
-                if (SelectedNid && pwList[i].nid == SelectedNid) {
-                    selectedRow = aTr;
-                }
-
-                var hostTd = document.createElement("td");
-                hostTd.setAttribute("class", "pw-element pw-left");
-                hostTd.innerHTML = pwList[i].hostname;
-
-                var userTd = document.createElement("td");
-                userTd.setAttribute("class", "pw-element pw-right");
-                userTd.innerHTML = pwList[i].username;
-
-                aTr.appendChild(hostTd);
-                aTr.appendChild(userTd);
-                document.getElementById("password-list").appendChild(aTr);
-                managerNote = null;
-            }
-            
-            if (selectedRow) {
-                SelectRow.call(selectedRow);
-            }
-        } else {
-            managerNote = '<input id="xmhandleverifypin" type="button" value="Verify PIN" /> to view your password data.';
-        }
-
-        document.getElementById("password-manager-note").innerHTML = managerNote ? managerNote : "";
-        if (document.getElementById('xmhandleverifypin')) {
-          document.getElementById('xmhandleverifypin').addEventListener('click', function() { HandleVerifyPin(); });
-        }
-        document.getElementById("password-manager-note").style.display = managerNote ? "block" : "none";
-        document.getElementById("password-manager-container").style.display = managerNote ? "none" : "block";
-    } else if (sectionId == "category-exceptions-section") {
-        var exceptionNote = 'No exceptions.  Domains are added to the exception list if you click "Never for this site" when prompted to save a password.';
-        if (gPinVerified) {
-            var exList = bg.PasswordStore.GetExceptionList();
-            document.getElementById("exception-list").innerHTML = "";
-
-            var selectedRow = null;
-            for (var i in exList) {
-                if (!exList.hasOwnProperty(i) || !exList[i]) {
-                    continue;
-                }
-                
-                var aTr = document.createElement("tr");
-                aTr.setAttribute("class", "pw-row");
-                aTr.setAttribute("xmarksDomain", i);
-                aTr.addEventListener("click", SelectException);
-
-                if (SelectedExceptionDomain && i == SelectedExceptionDomain) {
-                    selectedRow = aTr;
-                }
-
-                var aTd = document.createElement("td");
-                aTd.setAttribute("class", "pw-element");
-                aTd.innerHTML = i;
-
-                aTr.appendChild(aTd);
-                document.getElementById("exception-list").appendChild(aTr);
-                exceptionNote = null;
-            }
-
-            if (selectedRow) {
-                SelectException.call(selectedRow);
-            }
-        } else {
-            exceptionNote = '<input id="xmhandleverifypin2" type="button" value="Verify PIN" /> to view your password data.';
-        }
-
-        document.getElementById("exception-manager-note").innerHTML = exceptionNote ? exceptionNote : "";
-        if (document.getElementById('xmhandleverifypin2')) {
-          document.getElementById('xmhandleverifypin2').addEventListener('click', function() { HandleVerifyPin(); });
-        }
-        document.getElementById("exception-manager-note").style.display = exceptionNote ? "block" : "none";
-        document.getElementById("exception-manager-container").style.display = exceptionNote ? "none" : "block";
-    } else if (sectionId == "category-settings-section") {
-        document.getElementById("checkbox-show-gradient").checked = bg.Xmarks.Settings.GetBool("show-autofill-ui", "true");
-    }
-}
-
-var SelectedNid = null;
-function SelectRow() {
-    var aTable = document.getElementById("password-list");
-    for (var i = 0; i < aTable.rows.length; i++) {
-        aTable.rows[i].setAttribute("class", "pw-row");
-    }
-
-    this.setAttribute("class", "pw-row-selected");
-    document.getElementById("real-password").style.display = "none";
-    document.getElementById("real-password").innerHTML = "Password: " + this.getAttribute("xmarksPass");
-    document.getElementById("real-username").innerHTML = "User: " + this.getAttribute("xmarksUser");
-    document.getElementById("real-site").innerHTML = "Website: " + this.getAttribute("xmarksHost");
-    document.getElementById("show-row").disabled = false;
-    document.getElementById("show-row").style.display = "inline";
-    document.getElementById("remove-row").disabled = false;
-    document.getElementById("remove-row").onclick = BuildDeleteCallback(this.getAttribute("xmarksNid"));
-    SelectedNid = this.getAttribute("xmarksNid");
-
-    function BuildDeleteCallback(nid) {
-        return function() {
-            // Find the best row to be selected next
-            var aTable = document.getElementById("password-list");
-            var newSelectedNid = null;
-            var foundNid = false;
-            for (var i = 0; i < aTable.rows.length; i++) {
-                var aRow = aTable.rows[i];
-                if (aRow.getAttribute("xmarksNid") == nid) {
-                    // The current value of newSelectedNid is the last valid row before nid
-                    foundNid = true;
-                    if (newSelectedNid) {
-                        SelectedNid = newSelectedNid;
-                        break;
-                    }
-                } else if (aRow.style.display != "none" && !foundNid) {
-                    // nid hasn't been found yet and this is a valid row, mark it as newSelectedNid
-                    newSelectedNid = aRow.getAttribute("xmarksNid");
-                } else if (aRow.style.display != "none" && foundNid) {
-                    // nid has been found, this is the first valid row after it
-                    SelectedNid = aRow.getAttribute("xmarksNid");
-                    break;
-                }
-            }
-
-            var bg = chrome.extension.getBackgroundPage();
-            if (!bg.RemovePasswordNid(nid)) {
-                bg.Xmarks.LogWrite("Error removing password from list?");
-            }
-        };
-    }
-}
-
-var SelectedExceptionDomain = null;
-function SelectException() {
-    var aTable = document.getElementById("exception-list");
-    for (var i = 0; i < aTable.rows.length; i++) {
-        aTable.rows[i].setAttribute("class", "pw-row");
-    }
-
-    this.setAttribute("class", "pw-row-selected");
-    document.getElementById("remove-exception").disabled = false;
-    document.getElementById("remove-exception").onclick = BuildDeleteExceptionCallback(this.getAttribute("xmarksDomain"));
-    SelectedExceptionDomain = this.getAttribute("xmarksDomain");
-
-    function BuildDeleteExceptionCallback(domain) {
-        return function() {
-            // Find the best row to be selected next
-            var aTable = document.getElementById("exception-list");
-            var newExceptionDomain = null;
-            var foundDomain = false;
-            for (var i = 0; i < aTable.rows.length; i++) {
-                var aRow = aTable.rows[i];
-                if (aRow.getAttribute("xmarksDomain") == domain) {
-                    // The current value of newExceptionDomain is the last valid row before domain
-                    foundDomain = true;
-                    if (newExceptionDomain) {
-                        SelectedExceptionDomain = newExceptionDomain;
-                        break;
-                    }
-                } else if (aRow.style.display != "none" && !foundDomain) {
-                    // domain hasn't been found yet and this is a valid row, mark it as newExceptionDomain
-                    newSelectedNid = aRow.getAttribute("xmarksNid");
-                } else if (aRow.style.display != "none" && foundDomain) {
-                    // domain has been found, this is the first valid row after it
-                    SelectedExceptionDomain = aRow.getAttribute("xmarksDomain");
-                    break;
-                }
-            }
-
-            var bg = chrome.extension.getBackgroundPage();
-            if (!bg.RemovePasswordException(domain)) {
-                bg.Xmarks.LogWrite("Error removing exception from list?");
-            }
-        };
-    }
-}
-
-function DeleteRemotePasswords() {
-    $("#modaldialog").html("Are you sure you want to delete all your passwords from the Xmarks servers?  This will also turn off password sync.");
-    $("#modaldialog").dialog("option", "buttons", {"Cancel": function() { $(this).dialog("close"); }, "Delete": DoDelete});
-    $("#modaldialog").dialog("open");
-
-    function DoDelete() {
-        var bg = chrome.extension.getBackgroundPage();
-        bg.HandleAction("purge", {dataType: "passwords", callback: PurgeCallback});
-        
-        function PurgeCallback() {
-            bg.TurnOffPasswordSync();
-        }
-    }
-}
-
-function DeleteLocalPasswords() {
-    $("#modaldialog").html("Are you sure you want to delete all your Xmarks passwords from this browser?  This will also turn off password sync.");
-    $("#modaldialog").dialog("option", "buttons", {"Cancel": function() { $(this).dialog("close"); }, "Delete": DoDelete});
-    $("#modaldialog").dialog("open");
-
-    function DoDelete() {
-        var bg = chrome.extension.getBackgroundPage();
-        bg.ClearLocalPasswordData(function() { $("#modaldialog").dialog("close"); });
-    }
-}
-
-/*
- * Note: this is a direct copy of the code in settings.html.  Don't make changes here w/o making changes there!
- */
-function HandleSyncStatusChange(details) {
-    // refresh current tab
-    InitCategory(document.body.getAttribute("current-ui-section"));
-    
-    if (details.syncInfo) {
-        // A sync is either active or just finished, show modal dialog with current status
-        var infoHtml = "";
-        for (var i = 0; i < details.syncInfo.processed.length; i++) {
-            infoHtml += '<div style="margin: 5px 15px 0 15px; text-transform: capitalize; font-size: 8pt"><span style="font-weight: bold">' + details.syncInfo.processed[i].type + ':</span> ' + details.syncInfo.processed[i].status + '</div>';
-        }
-
-        for (var i = 0; i < details.syncInfo.toProcess.length; i++) {
-            var statusText = "Pending...";
-            if (i == 0) {
-                statusText = "In progress...";
-            }
-            infoHtml += '<div style="margin: 5px 15px 0 15px; text-transform: capitalize; font-size: 8pt"><span style="font-weight: bold">' + details.syncInfo.toProcess[i].type + ':</span> ' + statusText + '</div>';
-        }
-
-        if (details.syncInfo.toProcess.length) {
-            $("#modaldialog").html(chrome.i18n.getMessage("bg_currently_syncing") + '<div style="text-align: center; margin: 1em 0"><img src="images/loading-bar.gif" /></div>' + infoHtml);
-            $("#modaldialog").dialog("option", "buttons", {});
-            $("#modaldialog").dialog("open");
-        } else {
-            $("#modaldialog").dialog("close");
-
-            var bg = chrome.extension.getBackgroundPage();
-            if (bg.Xmarks.Settings.Get("auto-sync", "false") == "false") {
-                $("#modaldialog").html('<div><span style="text-transform: capitalize">' + details.syncInfo.action + '</span> complete.</div>' + infoHtml);
-                $("#modaldialog").dialog("option", "buttons", { "Ok": function() { $(this).dialog("close"); } });
-                $("#modaldialog").dialog("open");
-            }
-        }
-    }
-}
-
-function HandleVerifyPin() {
-    PinManager.VerifyCurrentPin('#modaldialog', VerifySuccessCallback);
-
-    function VerifySuccessCallback() {
-        gPinVerified = true;
-        InitCategory(document.body.getAttribute("current-ui-section"));
-        var bg = chrome.extension.getBackgroundPage();
-        var userData = bg.Xmarks.Settings.GetUserSettings();
-        if (!userData.passwordsrevision) {
-            $("#modaldialog").html("You have no Xmarks passwords on this browser. Would you like to download your Xmarks passwords now?");
-            $("#modaldialog").dialog("option", "buttons", { "Cancel": function() { $(this).dialog("close"); }, "Download": HandleDownload });
-            $("#modaldialog").dialog("open");
-        }
-
-        function HandleDownload() {
-            $(this).dialog("close");
-            bg.HandleAction("download", {dataType: "passwords"});
-        }
-    }
-}
-
-function FocusFilter(filterBox) {
-    if (filterBox.getAttribute("class") == "filter-default") {
-        filterBox.value = "";
-        filterBox.setAttribute("class", "filter-enabled");
-    }
-}
-
-function BlurFilter(filterBox) {
-    if (filterBox.value == "") {
-        filterBox.setAttribute("class", "filter-default");
-        filterBox.value = "Filter saved password list";
-    }
-}
-
-var InputFilterTimer = null;
-function InputFilter(filterBox) {
-    if (InputFilterTimer) {
-        window.clearTimeout(InputFilterTimer);
-        InputFilterTimer = null;
-    }
-    
-    InputFilterTimer = window.setTimeout(FilterFunc, 300);
-    function FilterFunc() {
-        var filterText = filterBox.value.toLowerCase();
-        var aTable = document.getElementById("password-list");
-        for (var i = 0; i < aTable.rows.length; i++) {
-            var aRow = aTable.rows[i];
-
-            var isMatch = false;
-            for (var j = 0; j < aRow.cells.length; j++) {
-                var aCell = aRow.cells[j];
-                if (filterText == "" || aCell.innerHTML.toLowerCase().indexOf(filterText) >= 0) {
-                    isMatch = true;
-                    break;
-                }
-            }
-
-            aRow.style.display = isMatch ? "" : "none";
-        }
-    }
-}
-
-function ToggleSetting(checkboxId, prefKey) {
-    var bg = chrome.extension.getBackgroundPage();
-    bg.Xmarks.Settings.Set(prefKey, document.getElementById(checkboxId).checked, true);
-}
-
-document.addEventListener('DOMContentLoaded', function()
-{
-  window.addEventListener('load', function() { HandleLoad(); });
-  document.getElementById('category-passwords').addEventListener('click', function() { LoadCategory(this); });
-  document.getElementById('category-exceptions').addEventListener('click', function() { LoadCategory(this); });
-  document.getElementById('category-settings').addEventListener('click', function() { LoadCategory(this); });
-  document.getElementById('show-row').addEventListener('click', function() { this.style.display='none';document.getElementById('real-password').style.display='inline'; });
-  document.getElementById('button-reset-pin').addEventListener('click', function() { PinManager.ResetPin('#modaldialog', function() {}); });
-  document.getElementById('button-remove-server').addEventListener('click', function() { DeleteRemotePasswords(); });
-  document.getElementById('xmdeletelocalpasswords').addEventListener('click', function() { DeleteLocalPasswords(); });
-  document.getElementById('message-close').addEventListener('click', function() { window.close(); });
-  document.getElementById('filter-passwords').addEventListener('focus', function() { FocusFilter(this); });
-  document.getElementById('filter-passwords').addEventListener('blur', function() { BlurFilter(this); });
-  document.getElementById('filter-passwords').addEventListener('input', function() { InputFilter(this); });
-  document.getElementById('checkbox-show-gradient').addEventListener('change', function() { ToggleSetting('checkbox-show-gradient', 'show-autofill-ui'); });
-});
diff --git a/apps/clients/chrome/src/trunk/settings.html b/apps/clients/chrome/src/trunk/settings.html
index 862ddefbe4..797a80bc27 100755
--- a/apps/clients/chrome/src/trunk/settings.html
+++ b/apps/clients/chrome/src/trunk/settings.html
@@ -167,20 +167,12 @@
     <div id="message-sync-types" class="subsection-title">Synchronization Types</div>
     <div class="subsection">
       <input id="subsection-types-bookmarks" type="checkbox" /> <label for="subsection-types-bookmarks"><span id="message-bookmarks">Bookmarks</span></label><br />
-      <span id="password-section">
-        <input id="subsection-types-passwords" type="checkbox" /> <label for="subsection-types-passwords"><span id="message-passwords">Passwords</span></label>
-        <input id="subsection-types-passwords-manager" type="button" value="Password Manager" /><br />
-        <a href='http://helpdesk.xmarks.com/troubleshooting/password-manager/'>Important information about Password Sync!</a><br/>
-      </span>
       <input id="subsection-types-tabs" type="checkbox" /> <label for="subsection-types-tabs"><span id="message-tabs">Open Tabs</span></label>
       <div id="tabs-computer-name" style="margin-left: 20px">
         <span id="message-computer-name">Name for this computer:</span>
         <input id="computer-name" type="text" maxlength="30" />
       </div>
 
-      <div id="lastpass-section" style="display:none">
-        <br/><a href="#" id="xmlastpass">Synchronize your Passwords with LastPass!</a>
-      </div>
     </div>
   </div>
   <br />
@@ -258,12 +250,11 @@
     <div id="message-manual-upload" class="subsection-title">Manual Upload</div>
     <div class="subsection">
       <div id="message-force-upload">
-        Uploading your bookmarks or passwords send this browser's data to our servers.  This will replace any data you currently have
+        Uploading your bookmarks sends this browser's data to our servers.  This will replace any data you currently have
         saved on our servers.
       </div>
       <div style="text-align: center; margin-top: 0.5em">
         <input type="button" id="message-upload-bookmarks" value="Upload Bookmarks" />
-        <input type="button" id="message-upload-passwords" value="Upload Passwords" />
       </div>
     </div>
   </div>
@@ -272,12 +263,11 @@
     <div id="message-manual-download" class="subsection-title">Manual Download</div>
     <div class="subsection">
       <div id="message-force-download">
-        Downloading your bookmarks or passwords will overwrite the data currently on this computer with the saved data you have
+        Downloading your bookmarks will overwrite the data currently on this computer with the saved data you have
         on our servers.
       </div>
       <div style="text-align: center; margin-top: 0.5em">
         <input type="button" id="message-download-bookmarks" value="Download Bookmarks" />
-        <input type="button" id="message-download-passwords" value="Download Passwords" />
       </div>
     </div>
   </div>
diff --git a/apps/clients/chrome/src/trunk/settings.js b/apps/clients/chrome/src/trunk/settings.js
index 6ec4a79db8..9d25e6895b 100755
--- a/apps/clients/chrome/src/trunk/settings.js
+++ b/apps/clients/chrome/src/trunk/settings.js
@@ -108,13 +108,6 @@ function InitCategory(sectionID) {
         }
     } else if (sectionID == "category-sync-section") {
         document.getElementById("subsection-types-bookmarks").checked = (bg.Xmarks.Settings.Get("sync-type-bookmarks", "true") == "true");
-        document.getElementById("subsection-types-passwords").checked = (bg.Xmarks.Settings.Get("sync-type-passwords", "false") == "true");
-        if(!document.getElementById("subsection-types-passwords").checked){
-          //They don't have passwords checked, hide it -- will help with the migration
-          document.getElementById("password-section").style.display='none';
-          document.getElementById("lastpass-section").style.display='';
-        }
-        
         document.getElementById("subsection-types-tabs").checked = (bg.Xmarks.Settings.Get("sync-type-tabs", "true") == "true");
         document.getElementById("subsection-options-autosync").checked = (bg.Xmarks.Settings.Get("enable-auto-sync", "true") == "true");
         UpdateComputerNameDisplay();
@@ -136,8 +129,6 @@ function InitCategory(sectionID) {
         
         document.getElementById("message-upload-bookmarks").disabled = (bg.Xmarks.Settings.Get("sync-type-bookmarks", "true") == "false");
         document.getElementById("message-download-bookmarks").disabled = (bg.Xmarks.Settings.Get("sync-type-bookmarks", "true") == "false");
-        document.getElementById("message-upload-passwords").disabled = (bg.Xmarks.Settings.Get("sync-type-passwords", "false") == "false");
-        document.getElementById("message-download-passwords").disabled = (bg.Xmarks.Settings.Get("sync-type-passwords", "false") == "false");
 
         var disableLogging = bg.Xmarks.Settings.Get("disableLogging", "false");
         document.getElementById("enable-logging").checked = (disableLogging == "true") ? false : true;
@@ -182,18 +173,6 @@ function InitCategory(sectionID) {
 
 function CloseAndTogglePw(){
   $("#modaldialog").dialog("close");
-  document.getElementById('password-section').style.display='';
-}
-
-function LastPass() {
-  $("#modaldialog").html("<img src='images/logo_big.png' width='270' height='45'/><br/>LastPass is a free, award-winning online password manager " +
-      "that will make your life easier and more secure. In November 2010, LastPass purchased Xmarks and is strongly encouraging all Xmarks users to use LastPass for password synchronization.<br/><br/>" +
-      "<a id='xmlastpass1' href='http://lastpass.com' target='_blank'>Try LastPass Now!</a><br/><br/>" + 
-      "<a id='xmlastpass2' href=''>Wait! I need to migrate my password data out of Xmarks first!</a><br/><br/>");
-  $("#modaldialog").dialog("option", "buttons", {"Ok": function() { $(this).dialog("close"); }});
-  $("#modaldialog").dialog("open");
-  document.getElementById('xmlastpass1').onclick = function() { $("#modaldialog").dialog("close"); };
-  document.getElementById('xmlastpass2').onclick = function() { CloseAndTogglePw(); return false; };
 }
 
 /*
@@ -270,30 +249,6 @@ function HandleSyncTypeBookmarksChange() {
     bg.Xmarks.Settings.Set("sync-type-bookmarks", document.getElementById("subsection-types-bookmarks").checked, true);
 }
 
-function HandleSyncTypePasswordsChange() {
-    var bg = chrome.extension.getBackgroundPage();
-    if (document.getElementById("subsection-types-passwords").checked) {
-        document.getElementById("subsection-types-passwords").checked = false; // Disable until init succeeds
-        PinManager.EnablePasswordSync("#modaldialog", SuccessCallback);
-    } else {    
-        bg.TurnOffPasswordSync();
-    }
-
-    function SuccessCallback(resp) {
-        document.getElementById("subsection-types-passwords").checked = true;
-        if (!bg.Xmarks.Settings.GetBool("enabled-password-sync", "false")) {
-            bg.Xmarks.Settings.Set("enabled-password-sync", true, true);
-            $("#modaldialog").html("Password sync is now enabled.  Note that Xmarks does <strong>not</strong> use or change " +
-                "passwords maintained by Chrome's built-in password manager. Manage your Xmarks passwords by pressing the " +
-                "<em>Password Manager</em> button in the Xmarks settings.<br /><br />" + 
-                "We strongly recommend that you disable Chrome's password manager.  You can do that by going to Chrome's " +
-                "options and clicking the <em>Never save passwords</em> option under the <em>Personal Stuff</em> tab.");
-            $("#modaldialog").dialog("option", "buttons", {"Ok": function() { $(this).dialog("close"); }});
-            $("#modaldialog").dialog("open");
-        }
-    }
-}
-
 function HandleComputerNameChange() {
     var bg = chrome.extension.getBackgroundPage();
     bg.Xmarks.Settings.Set("sync-computer-name", document.getElementById("computer-name").value, true);
@@ -321,9 +276,6 @@ function HandleAutoSyncChange() {
     bg.Xmarks.Settings.Set("enable-auto-sync", document.getElementById("subsection-options-autosync").checked, true);
 }
 
-/*
- * Note: this is a direct copy of the code in passwordmanager.html.  Don't make changes here w/o making changes there!
- */
 function HandleSyncStatusChange(details) {
     // refresh current tab
     InitCategory(document.body.getAttribute("current-ui-section"));
@@ -410,11 +362,6 @@ function HandleLoad() {
     LoadCategory(document.getElementById(category));
 }
 
-function OpenPasswordManager() {
-    var bg = chrome.extension.getBackgroundPage();
-    bg.OpenExtensionUrl("passwordmanager.html");
-}
-
 function LoadLocalizedStrings() {
     document.title = chrome.i18n.getMessage("settings_title");
     document.getElementById("message-update").innerHTML = chrome.i18n.getMessage("settings_updated", ['<a href="https://buy.xmarks.com/notes.php" target="_blank">', '</a>']);
@@ -433,8 +380,6 @@ function LoadLocalizedStrings() {
     document.getElementById("message-run-wizard").value = chrome.i18n.getMessage("settings_run_wizard");
     document.getElementById("message-sync-options").innerHTML = chrome.i18n.getMessage("settings_sync_options");
     document.getElementById("message-bookmarks").innerHTML = chrome.i18n.getMessage("settings_bookmarks");
-    document.getElementById("message-passwords").innerHTML = chrome.i18n.getMessage("settings_passwords");
-    document.getElementById("subsection-types-passwords-manager").value = chrome.i18n.getMessage("settings_password_manager");
     document.getElementById("message-tabs").innerHTML = chrome.i18n.getMessage("settings_tabs");
     document.getElementById("message-computer-name").innerHTML = chrome.i18n.getMessage("settings_computer_name");
     document.getElementById("message-auto-sync").innerHTML = chrome.i18n.getMessage("settings_auto_sync");
@@ -456,11 +401,9 @@ function LoadLocalizedStrings() {
     document.getElementById("message-manual-upload").innerHTML = chrome.i18n.getMessage("settings_manual_upload");
     document.getElementById("message-force-upload").innerHTML = chrome.i18n.getMessage("settings_manual_upload_desc");
     document.getElementById("message-upload-bookmarks").value = chrome.i18n.getMessage("settings_upload_bookmarks");
-    document.getElementById("message-upload-passwords").value = chrome.i18n.getMessage("settings_upload_passwords");
     document.getElementById("message-manual-download").innerHTML = chrome.i18n.getMessage("settings_manual_download");
     document.getElementById("message-force-download").innerHTML = chrome.i18n.getMessage("settings_manual_download_desc");
     document.getElementById("message-download-bookmarks").value = chrome.i18n.getMessage("settings_download_bookmarks");
-    document.getElementById("message-download-passwords").value = chrome.i18n.getMessage("settings_download_passwords");
     document.getElementById("message-logging").innerHTML = chrome.i18n.getMessage("settings_logging");
     document.getElementById("message-enable-logging").innerHTML = chrome.i18n.getMessage("settings_enable_logging");
     document.getElementById("logging-info").innerHTML = chrome.i18n.getMessage("settings_logging_info");
@@ -473,7 +416,6 @@ function LoadLocalizedStrings() {
 document.addEventListener('DOMContentLoaded', function()
 {
   window.addEventListener('load', function() { HandleLoad(); });
-  document.getElementById('xmlastpass').onclick = function() { LastPass(); return false; };
   document.getElementById('category-general').addEventListener('mouseover', function() { HighlightCategory(this); });
   document.getElementById('category-sync').addEventListener('mouseover', function() { HighlightCategory(this); });
   document.getElementById('category-profiles').addEventListener('mouseover', function() { HighlightCategory(this); });
@@ -483,7 +425,6 @@ document.addEventListener('DOMContentLoaded', function()
   document.getElementById('category-profiles').addEventListener('mouseout', function() { UnhighlightCategory(this); });
   document.getElementById('category-advanced').addEventListener('mouseout', function() { UnhighlightCategory(this); });
   document.getElementById('subsection-types-bookmarks').addEventListener('change', function() { HandleSyncTypeBookmarksChange(); });
-  document.getElementById('subsection-types-passwords').addEventListener('change', function() { HandleSyncTypePasswordsChange(); });
   document.getElementById('subsection-types-tabs').addEventListener('change', function() { HandleSyncTypeTabsChange(); });
   document.getElementById('computer-name').addEventListener('change', function() { HandleComputerNameChange(); });
   document.getElementById('encryption-setting').addEventListener('change', function() { HandleEncryptionChange(this); });
@@ -496,15 +437,12 @@ document.addEventListener('DOMContentLoaded', function()
   document.getElementById('message-sync-now').addEventListener('click', function() { TriggerAction('sync'); });
   document.getElementById('subsection-account-authenticate').addEventListener('click', function() { ToggleAuth(); });
   document.getElementById('message-run-wizard').addEventListener('click', function() { RunSetupWizard(); });
-  document.getElementById('subsection-types-passwords-manager').addEventListener('click', function() { OpenPasswordManager(); });
   document.getElementById('message-my-xmarks').addEventListener('click', function() { VisitMyXmarks(); });
   document.getElementById('message-change-profile').addEventListener('click', function() { ShowProfilesWindow(); });
   document.getElementById('restore-preview').addEventListener('click', function() { PreviewBookmarks(); });
   document.getElementById('restore-bookmarks').addEventListener('click', function() { RestoreBookmarks(); });
   document.getElementById('message-repair-bookmarks').addEventListener('click', function() { RepairNow('bookmarks'); });
   document.getElementById('message-upload-bookmarks').addEventListener('click', function() { ConfirmUpload('bookmarks'); });
-  document.getElementById('message-upload-passwords').addEventListener('click', function() { ConfirmUpload('passwords'); });
   document.getElementById('message-download-bookmarks').addEventListener('click', function() { ConfirmDownload('bookmarks'); });
-  document.getElementById('message-download-passwords').addEventListener('click', function() { ConfirmDownload('passwords'); });
   document.getElementById('message-close').addEventListener('click', function() { window.close(); });
 });
diff --git a/apps/clients/chrome/src/trunk/xmarks-nodelist.js b/apps/clients/chrome/src/trunk/xmarks-nodelist.js
index d4a5e0aa9d..8ac8972a16 100644
--- a/apps/clients/chrome/src/trunk/xmarks-nodelist.js
+++ b/apps/clients/chrome/src/trunk/xmarks-nodelist.js
@@ -107,7 +107,7 @@ function xmarks_store_baseline(rev, bookmarks)
 
 function xmarks_load_baseline(str)
 {
-    if (!str)
+    if (!str || str === "undefined")
         return {};
 
     var bookmarks = JSON.parse(str);
-- 
2.11.0

